@import Main._
@import readme.Sample._
@import ammonite.ops._


@a(
  href:="https://github.com/lihaoyi/ammonite",
  position.absolute,
  top:=0,right:=0,border:=0,
  img(
    src:="https://camo.githubusercontent.com/a6677b08c955af8400f44c6298f40e7d19cc5b2d/68747470733a2f2f73332e616d617a6f6e6177732e636f6d2f6769746875622f726962626f6e732f666f726b6d655f72696768745f677261795f3664366436642e706e67",
    alt:="Fork me on GitHub"
  )
)


@scalatags.Text.tags2.style
  /* Hacks to make things look better */
  * .hljs-symbol{
    color: #008000;
    font-weight: bold;
    font-style: normal;
  }
  .scalatex-site-Styles-content li{
    margin-bottom: 10px;
  }

@sect("Ammonite", "Scala Scripting")
  @p
    Ammonite lets you use the
    @lnk("Scala language", "https://www.scala-lang.org/") for
    scripting purposes: in the @sect.ref("Ammonite-REPL", "REPL"), as
    @sect.ref("Scala Scripts", "scripts"), as a @sect.ref("Ammonite-Ops",
    "library to use in existing projects"), or as a standalone
    @sect.ref("Ammonite-Shell", "systems shell").

  @val logos = Seq(
    (
        "fa-refresh",
        "Ammonite-REPL",
        "A Modernized Scala REPL",
        """
        With syntax highlighting,
        multi-line editing, the ability to load maven artifacts
        directly in the REPL, and many other quality-of-life
        improvements missing in the default Scala REPL.
        """
    ),
    (
        "fa-file-text-o",
        "Scala Scripts",
        "Lightweight Programming in Scala",
        """
        Create scripts that you can
        run easily from the command line, without the overhead of
        setting up a "project" or waiting for SBT's slow startup times.
        """

    ),
    (
        "fa-gears",
        "Ammonite-Ops",
        "A Rock-solid Filesystem Library for Scala",
        """
        Deal with the filesystem
        easily from your existing Scala projects or applications, as easily
        as you would from a Bash or Python script.
        """
    ),
    (
        "fa-terminal",
        "Ammonite-Shell",
        "A modern replacement for the Bash system shell",
        """
        Provides a systems shell in the high-level Scala language, letting you
        seamlessly mix system operations with real code without the hassle or
        the frustration of trying to write complex code in Bash.
        """
    )
  )

  @table(marginTop := "16px")
    @for(data <- logos)
      @tr
        @td(width := "200px", textAlign.center)
          @div(marginTop := "24px")
            @i(cls := s"fa ${data._1}", aria.hidden := "true", fontSize := "48px")

          @h2(fontWeight := 300, color := "#ccc")
            @sect.ref(data._2)
        @td(p(b(data._3), ".", data._4))



  @p
    The goal of Ammonite is to liberate your Scala code from heavyweight
    "projects", using the lightweight Ammonite runtime: if you want to run some
    Scala, open the @sect.ref{Ammonite-REPL} and run it, interactively! If you
    want to run it later, save it into some @sect.ref{Scala Scripts} and run
    those later.

  @p
    For a video overview of the project and it's motivation, check out this talk:

  @iframe(
    src := "https://player.vimeo.com/video/148552858",
    width := 800,
    height := 600,
    attr("frameborder") := 0,
    attr("webkitallowfullscreen") := 1,
    attr("mozallowfullscreen") := 1,
    attr("allowfullscreen") := 1
  )
  @p
    If you are already working in Scala,
    you no longer have to drop down to Python or Bash for your scripting needs:
    you can use @sect.ref{Scala Scripts} for your scripting needs, and avoid
    the overhead of working in multiple languages.

  @p
    Each of the above projects is usable standalone; click on the links to jump
    straight to their docs, or scroll around and browse through the navigation
    bar on the left. If you're wondering what you can do @i{with} Ammonite,
    there is an

  @ul
    @li
      @sect.ref{Ammonite Cookbook}

  @p
    Which contains a bunch of fun things that you can do, whether in the
    interactive @sect.ref{Ammonite-REPL} or in some @sect.ref{Scala Scripts}.
    You can also take a look at how people are using Ammonite in the wild:

  @ul
    @li
      @sect.ref{In the Wild}

  @p
    To see what people are doing with it. And there are more talks available
    below:

  @ul
    @li
      @sect.ref{Talks}

  @p
    The bulk of this page describes the latest stable release of Ammonite,
    @code{@ammonite.Constants.version}. If you're willing to live on the edge,
    we also publish @sect.ref{Unstable Versions} from any commits that get pushed
    or pull-requests that land in the master branch:

  @ul
    @li
      @sect.ref{Unstable Versions}

@Repl()
@Scripts()
@Ops()
@Shell()
@Cookbook()
@Footer()
