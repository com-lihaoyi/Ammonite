@import Main._
@import readme.Sample._
@import ammonite.ops._
@val ammoniteTests = 'repl/'src/'test/'scala/'ammonite/'repl/'session
@val replSource = 'repl/'src/'main/'scala/'ammonite/'repl
@val advancedTests = ammoniteTests/"AdvancedTests.scala"
@sect("Ammonite-REPL", "A Modernized Scala REPL")

  @p
    Ammonite is a cleanroom re-implementation of the Scala REPL from first principles. It is much more featureful than the default REPL and comes with a lot of @sect.ref("Features", "ergonomic improvements") and @sect.ref("Configuration", "configurability") that may be familiar to people coming from IDEs or other REPLs such as @a("IPython", href:="http://ipython.org/") or @a("Zsh", href:="http://www.zsh.org/"). It can be combined with @sect.ref{Ammonite-Ops} to replace Bash as your systems shell, but also can be used alone as a @sect.ref("Features", "superior") version of the default Scala REPL, or as a @sect.ref("Debugging", "debugging tool").

  @p
    If you want to use Ammonite as a plain Scala shell, download the standalone executable:

  @hl.sh
    @replCurl

  @p
    This will give you access to Ammonite for Scala:

  @img(src:="GettingStarted.png", width:="100%")

  @p
    With @sect.ref{Pretty Printing}, @sect.ref{Syntax Highlighting} for input and output, @sect.ref{Artifact Loading} in-REPL, and all the other nice features!

  @p
    If you want to use Ammonite as a filesystem shell, take a look at @sect.ref{Ammonite-Shell}

  @p
    If you want some initialization code available to the REPL, you can add it to your @code{~/.ammonite/predef.scala}.

  @p
    You can also try out Ammonite in an existing SBT project, add the following to your @code{build.sbt}

  @hl.scala
    libraryDependencies += "com.lihaoyi" % "ammonite-repl" % "@ammonite.Constants.version" % "test" cross CrossVersion.full

    initialCommands in (Test, console) := """ammonite.repl.Repl.run("")"""

  @p
    After that, simple hit
  @code
    sbt projectName/test:console
  @p
    To activate the Ammonite REPL

  @p
    You can also pass a string to the @code{run} call containing any commands or imports you want executed at the start of every run. If you want Ammonite to be available in all projects, simply add the above snippet to a new file @code{~/.sbt/0.13/global.sbt}.

  @p
    If you have any questions, come hang out on the @sect.ref("Community", "mailing list or gitter channel") and get help!

  @sect{Features}
    @p
      Ammonite-REPL supports many more features than the default REPL, including:

    @sect{Artifact Loading}

      @hl.ref(ammoniteTests/"ProjectTests.scala", Seq("standalone", "@"), "\"\"\"")

      @p
        Ammonite allows you to load artifacts directly from maven central by copy & pasting their SBT ivy-coordinate-snippet. In addition, you can also load in jars as @hl.scala{java.io.File}s to be included in the session or simple @hl.scala{String}s to be executed using the @hl.scala{load} command.

      @p
        This makes Ammonite ideal for trying out new libraries or tools. You can pull down projects like @a("Scalaz", href:="https://github.com/scalaz/scalaz") or @a("Shapeless", href:="https://github.com/milessabin/shapeless") and immediately start working with them in the REPL:

      @hl.ref(ammoniteTests/"ProjectTests.scala", Seq("scalaz", "@"), "\"\"\"")

      @hl.ref(ammoniteTests/"ProjectTests.scala", Seq("shapeless", "@"), "\"\"\"")

      @p
        Even non-trivial web frameworks like Finagle or Akka-HTTP can be simply pulled down and run in the REPL!

      @hl.ref(ammoniteTests/"ProjectTests.scala", Seq("finagle", "@"), "\"\"\"")

      @hl.ref(ammoniteTests/"ProjectTests.scala", Seq("akkahttp", "@"), "\"\"\"")

    @sect{Pretty-printed output}

      @hl.ref(advancedTests, Seq("'pprint", "@"), "\"\"\"")

      @p
        Ammonite-REPL uses @sect.ref{PPrint} to display its output by default. That means that everything is nicely formatted to fit within the width of the terminal, and is copy-paste-able!

      @p
        By default, Ammonite @sect.ref("Configurable Truncation", "truncates") the pretty-printed output to avoid flooding your terminal. If you want to disable truncation, call @hl.scala{show(...)} on your expression to pretty-print it's full output. You can also pass in an optional @hl.scala{height = ...} parameter to control how much you want to show before truncation.
    @sect{Configurable Truncation}
      @hl.ref(advancedTests, Seq("'truncation", "@"), "\"\"\"")

      @p
        Ammonite-REPL intelligently truncates your output when it's beyond a certain size. You can request for the full output to be printed on-demand, print a certain number of lines, or even change the implicit @code{pprintConfig} so subsequent lines all use your new configuration.

    @sect{Syntax Highlighting}
      @img(src:="Highlighting.png", width:="100%")
      @p
        Ammonite syntax highlights both the code you're entering as well as any output being echoed in response. This should make it much easier to work with larger snippets of input.
      @p
        All colors are configurable, and you can easily turn off colors entirely via the @sect.ref{Configuration}.
      @p
        Stack traces are similarly highlighted, for easier reading:

      @img(src:="ColoredTraces.png", width:="100%")

    @sect{Improved Editing}
      @p
        Ammonite by default ships with a custom implementation of readline, which provides...

     @ul
       @li
         Multi-line editing! You can use the @b{Up} and @b{Down} arrows to navigate between lines within your snippet. This makes dealing with larger snippets of code much easier.
       @li
         Desktop key-bindings! You can use @b{Alt-Left}/@b{Right} to move forward/backwards by one word at a time or hold down @b{Shift} to select text to delete. These compose as you'd be used to: e.g. @b{Shift-Up} selects all the text between your current cursor and the same column one row up.
       @li
         Console key-bindings! All the readline-style navigation hotkeys like @b{Ctrl-W} to delete a word or @b{Esc-Left}/@b{Right} to navigate one word left/right still work.



    @sect{Superior Autocomplete}
      @p
        The original Scala REPL provides no autocomplete except for the most basic scenarios of @hl.scala{value.<complete>}. In the Ammonite-REPL, you get the same autocomplete-anywhere support that you get in a modern IDE.

      @hl.scala("""
        @ Seq(1, 2, 3).map(x => x.)
        getClass            ##                  asInstanceOf        isInstanceOf
        toString            hashCode            equals              !=
        ==                  %                   /                   *
        -                   +                   ^                   &
        |                   >=                  >                   <=
        <                   >>                  >>>                 <<
        unary_-             unary_+             unary_~             toDouble
        toFloat             toLong              toInt               toChar
        toShort             toByte              compareTo           doubleValue
        ...

        @ Futu
        scala.collection.parallel.FutureThreadPoolTasks
        scala.collection.parallel.FutureTasks
        scala.concurrent.impl.Future$PromiseCompletingRunnable
        scala.concurrent.impl.Future
        scala.concurrent.Future
        scala.concurrent.FutureTaskRunner
        scala.concurrent.Future$InternalCallbackExecutor
        scala.concurrent.Future$class
        java.util.concurrent.Future
        java.util.concurrent.FutureTask$WaitNode
        java.util.concurrent.FutureTask
        com.sun.corba.se.impl.orbutil.closure.Future
      """)

      @p
        Neither of these examples work in the standard Scala REPL.

    @sect{Interrupting run-away execution with Ctrl-C}
      @hl.scala("""
        @ while(true) ()
        ... hangs ...
        ^Ctrl-C
        Interrupted!

        @
      """)
      @p
        The traditional Scala REPL doesn't handle runaway code, and gives you no option but to kill the process, losing all your work. Ammonite-REPL lets you interrupt the thread, stop the runaway-command and keep going.

    @sect{Compiler-crash Robustness}
      @hl.ref(ammoniteTests/"FailureTests.scala", Seq("compilerCrash", "@"), "\"\"\"")

      @p
        The default Scala REPL throws away all your work if the compiler crashes. This doesn't make any sense, because all the compiler is is a dumb @hl.scala{String => Array[Byte]} pipe. In the Ammonite, we simply swap out the broken compiler for a new one and let you continue your work.
    @sect{Multiline Input}
      @p
        To enter multiline input into the Ammonite-REPL, simply wrap the multiple lines in curly braces @hl.scala("{ ... }"), and Ammonite will wait until you close it before evaluating the contents:

      @hl.ref(advancedTests, Seq("'unwrapping", "@"))

      @p
        As you can see, the contents of the @hl.scala("{ ... }") block are unwrapped and evaluated as top-level statements. You can use this to e.g. declare mutually recursive functions or classes & companion-objects without being forced to squeeze everything onto a single line.

      @p
        If you don't want this un-wrapping behavior, simply add another set of curlies and the block will be evaluated as a normal block, to a single expression:

      @hl.ref(advancedTests, Seq("'forceWrapping", "@"))
    @sect{Other Fixes}
      @p
        Apart from the above features, the Ammonite REPL fixes a large number of bugs in the default Scala REPL, including but not limited to:
      @ul
        @val bugs = Seq("6302", "8971", "9249", "4438", "8603", "6660", "7953", "6659", "8456", "1067", "8307", "9335")
        @for(bug <- bugs){
          @li(a("SI-"+bug, href:="https://issues.scala-lang.org/browse/SI-"+bug))
        }
  @sect{Builtins}
    @p
      Ammonite contains a range of useful built-ins implemented as normal functions. Everything inside the @hl.scala{ReplAPI} trait is imported by default and can be accessed directly by default to control the console.

    @hl.ref(replSource/'frontend/"ReplAPI.scala", "trait ReplAPI", "// End of ReplAPI")

  @sect{Script Files}
    @p
      Ammonite defines a format that allows you to load external scripts into the REPL; this can be used to save common functionality so it can be used at a later date. In the simplest case, a script file is simply a sequence of Scala statements, e.g.

    @hl.scala
      // script.scala
      // print banner
      println("Welcome to the XYZ custom REPL!!")

      // common imports
      import sys.process._
      import collection.mutable

      // common initialization code
      val x = 123
      ...

    @p
      Which you can then load into the REPL as desired:
    @hl.scala
      @@ mutable.Seq(x) // doesn't work
      Compilation Failed
      Main.scala:122: not found: value mutable
      mutable.Seq(x) // doesn't work
      ^
      Main.scala:122: not found: value x
      mutable.Seq(x) // doesn't work
                  ^
      @@ import ammonite.ops._
      @@ load.module("script.scala")
      Welcome to the XYZ custom REPL!!

      @@ mutable.Seq(x) // works
      res1: mutable.Seq[Int] = ArrayBuffer(123)

    @p
      By default, everything in a script is compiled and executed as a single block. That means that if you want to perform classpath-modifying operations, such as @hl.scala{load.jar} or @hl.scala{load.ivy}, its results will not be available within the same script if you want to use methods, values or packages defined in the loaded code. To make this work, break the script up into multiple compilation units with an @@ sign, e.g.

    @hl.scala
      // print banner
      println("Welcome to the XYZ custom REPL!!")

      load.ivy("org.scalaz" %% "scalaz-core" % "7.1.1")

      @@

      // common imports
      import scalaz._
      import Scalaz._

      // common initialization code
      ...
    @p
      Ammonite provides two ways to load scripts, @hl.scala{load.exec} and @hl.scala{load.module}.

    @p
      With @hl.scala{load.exec} the script is executed like it was pasted in the REPL. Exec scripts can access all values previously defined in the REPL, and all side-effects are guaranteed to be applied. This is useful for one-off sets of commands.
    @p
      With @hl.scala{load.module}, the script is loaded like a Scala module. That means it can't access values previously defined in the REPL, but it is guaranteed to only execute once even if loaded many times by different scripts. If you want to execute the script code multiple times, put it in a function and call it after you load the script.

     @p
       Any scripts you load can themselves load scripts. You can also run scripts using the Ammonite executable from an external shell (e.g. bash):

    @hl.scala
      bash$ ./amm path/to/script.scala

    @p
      All types, values and imports defined in scripts are available to commands entered in REPL after loading the script.

   @p
      Ammonite also provides a function to load a string of Scala code as if it were entered from the REPL. It comes with an option to load the code silently, or to get a printout of the results in the REPL exactly as if it was entered in the REPL:

      @@

      // scalaCode can be multiple lines, define functions, etc
      // visible is an optional parameter that defaults to false (no output)
      load(scalaCode: String, visible: Boolean = false)
 
     @p
      Here's an example:

      @@

      $: load("""val foo = "I am cow!" """)

      $: foo
      res19: String = "I am cow!"
      $: load("""val bar = 42; val baz = 2; bar*baz""", true)
      bar: Int = 42
      baz: Int = 2
      res21_2: Int = 84
      $: res21_2
      res22: Int = 84
      $:

  @sect{Configuration}
    @p
      Ammonite is configured via Scala code, that can live in the @code{~/.ammonite/predef.scala} file, passed in through SBT's @hl.scala{initialCommands}, or passed to the command-line executable as @code{--predef='...'}.

    @p
      Anything that you put in @code{predef.scala} will be executed when you load the Ammonite REPL. This is a handy place to put common imports, setup code, or even call @hl.scala{load.ivy} to @sect.ref("Artifact Loading", "load third-party jars"). The compilation of the predef is cached, so after the first run it should not noticeably slow down the initialization of your REPL.

    @p
      Some examples of things you can configure:

    @hl.ref(ammoniteTests/"BuiltinTests.scala", Seq("basicConfig", "@"))

    @sect{Refs}
      @p
        By default, all the values you're seeing here with the @code{()} after them are @hl.scala{Ref}s, defined as

      @hl.ref(replSource/"Util.scala", "trait StableRef", "object Ref")

      @p
        As you can see from the signature, you can basically interact with the @hl.scala{Ref}s in two ways: either getting or setting their values as values, or binding their values to expressions that will be evaluated every time the @hl.scala{Ref}'s value is needed.

      @p
        As an example of the latter, you can use @hl.scala{bind} to set your @hl.scala{prompt} to always include your current working directory

      @hl.scala
        repl.prompt.bind(wd.toString + "@@ ")

      @p
        As is common practice in other shells. Further modifications to make it include e.g. your current branch in Git (which you can call through Ammonite's @sect.ref("Spawning Subprocess", "subprocess API") or the current timestamp/user are similarly possible.

    @sect{Compiler Flags}
      @p
        Apart from configuration of the rest of the shell through @sect.ref{Refs}, configuration of the Scala compiler takes place separately through the compiler's own configuration mechanism. You have access to the compiler as @code{compiler}, and can modify its settings as you see fit. Here's an example of this in action:

      @hl.ref(ammoniteTests/"BuiltinTests.scala", Seq("settings", "@"))

      @p
        If you want these changes to always be present, place them in your @code{~/.ammonite/predef.scala}.


  @sect{Debugging}
    @p
      Ammonite can be used as a tool to debug any other Scala program, by conveniently opening a REPL at any point within your program with which you can interact with live program data, similar to pdb/ipdb in Python. To do so, first add Ammonite to your classpath, e.g. through this SBT snippet:
    @hl.scala
      libraryDependencies += "com.lihaoyi" % "ammonite-repl" % "@ammonite.Constants.version" cross CrossVersion.full

    @p
      Note that unlike the snippet given @sect.ref("Ammonite", "above"), we leave out the @hl.scala{% "test"} because we may want ammonite to be available within the "main" project, and not just in the unit tests. Then, anywhere within your program, you can place a breakpoint via:

    @hl.scala
      import ammonite.repl.Repl._
      debug("name1" -> value1, "name2" -> value2, ...)

    @p
      And when your program reaches that point, it will pause and open up an Ammonite REPL with the values you provided it bound to the names you gave it. From there, you can interact with those values as normal Scala values within the REPL. Use @code{Ctrl-D} or @hl.scala{exit} to exit the REPL and continue normal program execution.
    @p
      Here's an example of it being used to debug changes to the @a("WootJS webserver", href:="https://github.com/d6y/wootjs"):

    @img(src:="Debugging.png", width:="100%")
    @p
      In this case, we added the @hl.scala{debug} statement within the websocket frame handler, so we can inspect the values that are taking part in the client-server data exchange. You can also put the @hl.scala{debug} statement inside a conditional, to make it break only when certain interesting situations (e.g. bugs) occur.

    @p
      As you can see, you can bind the values you're interested in to names inside the debug REPL, and once in the REPL are free to explore them interactively.
    @p
      The @hl.scala{debug()} call returns @hl.scala{: Any}; by default, this is @hl.scala{(): Unit}, but you can also return custom values by passing in an argument to @hl.scala{exit(...)} when you exit the REPL. This value will then be returned from @hl.scala{debug()}, and can be used in the rest of your Scala application.

    @sect{Remote REPL}

      @p
        Ammonite can also be used to remotely connect to your running application and interact with it in real-time, similar to Erlang's @code{erl -remsh} command.

      @p
        This is useful if e.g. you have multiple Scala/Java processes running but aren't sure when/if you'd want to inspect them for debugging, and if so which ones. With Ammonite, you can leave a ssh server running in each process. You can then and connect-to/disconnect-from each one at your leisure, working with the in-process Scala/Java objects and methods and classes interactively, without having to change code and restart the process to add breakpoints or instrumentation.

      @p
        To do this, add ammonite-sshd to your classpath, for example with SBT:

      @hl.scala
        libraryDependencies += "com.lihaoyi" % "ammonite-sshd" % "@ammonite.Constants.version" cross CrossVersion.full

      @p
        Now add repl server to your application:

      @hl.scala
        import ammonite.sshd._
        val replServer = new SshdRepl(
          SshServerConfig(
            address = "localhost", // or "0.0.0.0" for public-facing shells
            port = 22222, // Any available port
            username = "repl", // Arbitrary
            password = "your_secure_password" // or ""
          )
        )
        replServer.start()

      @p
        And start your application. You will be able to connect to it using ssh like this: @hl.sh("ssh repl@localhost -p22222") and interact with your running app. Invoke @hl.scala{stop()} method whenever you want to shutdown ammonite sshd server. Here for example sshd repl server is embedded in the @a("Akka HTTP microservice example", href:="https://github.com/theiterators/akka-http-microservice"):

      @img(src:="DebuggingViaSshd.png", width:="100%")

      @p
        Here we can interact with code live, inspecting values or calling methods on the running system. We can try different things, see which works and which not, and then put our final bits in application code. In this example app is located on local machine, but you are free to connect to any remote node running your code.

      @p
        @b{Security notes:} It is probably unsafe to run this server publicly (on host @hl.scala{"0.0.0.0"}) in a production, public-facing application. Currently it doesn't supports key-based auth, and password-based auth is notoriously weak.

      @p
        Despite this, it is perfectly possible to run these on production infrastructure: simply leave the @hl.scala{host} set to @hl.scala{"localhost"}, and rely on the machine's own SSH access to keep out unwanted users: you would first @code{ssh} onto the machine itself, and then @code{ssh} into the Ammonite REPL running on @code{localhost}.

      @p
        Typically most organizations already have bastions, firewalls, and other necessary infrastructure to allow trusted parties SSH access to the relevant machines. Running on @code{localhost} lets you leverage that and gain all the same security properties without having to re-implement them in Scala.
