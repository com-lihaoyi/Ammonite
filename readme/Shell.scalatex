@import Main._
@import readme.Sample._
@sect("Ammonite-Shell", "Replacing Bash for the 21st Century")
  @p
    The @b{Ammonite-Shell} is a rock-solid system shell that can replace Bash as the interface to your operating system, @sect.ref("Scala as the Language", "using  Scala") as the primary command and scripting language, @sect.ref("Running on the JVM", "running on the JVM"). Apart from @sect.ref("Shell Basics", "system operations"), Ammonite-Shell provides the full-range of @sect.ref("Scala/Java APIs", "Java APIs") for usage at the command-line, including loading libraries from Maven Central.

  @p
    Why would you want to use Ammonite-Shell instead of Bash? Possible reasons include:

  @ul
    @li
      You can @lnk("never remember the syntax to write an if-statement in Bash", "http://stackoverflow.com/questions/19343390/bash-if-statement-with-white-space-in-variable")
    @li
      You are sick of googling the same set of inconsistent, ad-hoc commands over and over: "@lnk("obviously", "http://stackoverflow.com/questions/12522269/bash-how-to-find-the-largest-file-in-a-directory-and-its-subdirectories") you need the flag @code{-nrk 7} to sort by file size!"
    @li
      You've seen Bash's dynamic/sloppy nature @lnk("fail hard", "https://github.com/valvesoftware/steam-for-linux/issues/3671"), and don't want your future work to fall victim to the same bugs
    @li
      You think that technology has improved in the last @lnk("38 years", "https://en.wikipedia.org/wiki/Bourne_shell") and a modern systems shell should be better than the shells of our forefathers
  @p
    If none of these apply to you, then likely you won't be interested. If any of these bullet points strikes a chord, then read on to get started. For more discussion about why this project exists, take a look at the presentation slides for @lnk("Beyond Bash: shell scripting in a typed, OO language", "https://tinyurl.com/beyondbash"), presented at Scala by the Bay 2015, or check out the section on @sect.ref{Design Decisions & Tradeoffs}.

 
  @p
    To begin using Ammonite-Shell, simply  download the default @code{predef.sc} to configure your REPL to be a usable systems shell before downloading the @sect.ref{Ammonite-REPL} executable (below):

  @hl.sh
    @filesystemCurl
  @hl.sh
    @replCurl

  @p
    If you're on @lnk("FreeBSD", "https://www.freebsd.org/") then you can simply install the package by @code{pkg install ammonite} or compile it from the @code{shells/ammonite} ports directory. Be sure to setup your @code{predef.sc} correctly though.

  @p
    You can then start using Ammonite as a replacement for Bash:

  @img(src:="SystemShell.png", width:="100%", loadingLazy)

  @sect{Shell Basics}
    @p
      Ammonite-Shell isn't backwards compatible with Bash. It isn't even the same language, giving you access to all of Scala instead of the quirky Bash scripting language. Nevertheless, lots of things you'd expect in Bash turn up in Ammonite-Shell:

    @sect{Working Directory}
      @compare("pwd", "wd")

      @p
        Bash's @hl.sh{pwd} is instead called @hl.scala{wd}. Instead of being a subprocess that prints to stdout, @hl.scala{wd} is simply a variable holding the working directory.
      @p
        As you can see, the path syntax is also different: as an absolute path, @hl.scala{wd} must start from @hl.scala{root} and the path segments must be quoted as Scala @hl.scala{"string"}s or @hl.scala{'symbol}s. Apart from that, however, it is basically the same. The @sect.ref("Paths", "documentation about Paths") goes over the syntax and semantics of @sect.ref{Paths} in more detail.

      @p
        You can navigate around the filesystem using @hl.scala{cd!}, instead of Bash's @hl.sh{cd}:

      @compare(
        """
        |pwd
        |cd target
        |pwd
        |cd ..
        |pwd""".stripMargin,
        """
        |wd
        |cd! 'target
        |wd
        |cd! up
        |wd
        """.stripMargin
      )

    @sect{Listing Files}
      @compare("ls", "ls!")

      @p
        Bash's @hl.sh{ls} syntax is tweaked slightly to become @hl.scala{ls!}. Apart from that, it basically does the same thing.

      @p
        Listing files in other folders behaves similarly:

      @compare("ls project", "ls! 'project")
      @compare("ls project/target", "ls! 'project/'target")

      @p
        Again, we have to use the quoted @hl.scala{'symbol}/@hl.scala{"string"} syntax when defining @sect.ref{Paths}, but otherwise it behaves identically. You can press @code{<tab>} at any point after a @code{/} or halfway through a file-name to auto-complete it, just like in Bash.
      @p
        Listing recursively is done via @hl.scala{ls.rec}, instead of @code{find}:

      @compare("find ops/src/main", "ls.rec! 'ops/'src/'main")

      @p
        @hl.scala{ls}, @hl.scala{ls.rec} and other commands are all functions defined by @sect.ref{Ammonite-Ops}.

    @sect{Filesystem Operations}
      @p
        Ammonite-Shell uses @sect.ref{Ammonite-Ops} to provide a nice API to use filesystem operations. The default setup will @hl.scala{import ammonite.ops._} into your @sect.ref{Ammonite-REPL}, gives the nice path-completion shown above, and also provides some additional command-line-friendly functionality on top of the default @sect.ref{Ammonite-Ops} commands:

      @compare(
        """mkdir target/test
          |echo "hello" > target/test/hello.txt
          |cat target/test/hello.txt
          |ls target/test
          |cp target/test/hello.txt target/test/hello2.txt
          |ls target/test
          |mv target/test/hello.txt target/test/hello3.txt
          |ls target/test
          |rm -rf target/test""".stripMargin,
        """mkdir! 'target/'test
          |write('target/'test/"hello.txt", "hello")
          |read('target/'test/"hello.txt")
          |ls! 'target/'test
          |cp('target/'test/"hello.txt", 'target/'test/"hello2.txt")
          |ls! 'target/'test
          |mv('target/'test/"hello.txt", 'target/'test/"hello3.txt")
          |ls! 'target/'test
          |rm! 'target/'test""".stripMargin
      )
    @sect{Piping}
      @p
        Ammonite allows piping similar to how Bash does it. Unlike Bash, Ammonite has a variety of @sect.ref("Extensions", "pipes") you can use that do different things:
      @ul
        @li
          @hl.scala{things | f} is an alias for @hl.scala{things map f}
        @li
          @hl.scala{things || f} is an alias for @hl.scala{things flatMap f}
        @li
          @hl.scala{things |? f} is an alias for @hl.scala{things filter f}
        @li
          @hl.scala{things |& f} is an alias for @hl.scala{things reduce f}
        @li
          @hl.scala{things |! f} is an alias for @hl.scala{things foreach f}

      @p
        For example, this is how you can get the dot-files in the current directory:

      @compare("""ls -a | grep "^\." """, "ls! pwd |? (_.last(0) == '.')")

      @p
        Here, we're using the @hl.scala{|?} pipe, which basically performs a filter on the paths coming in on the left. In this case, we're checking that for each path, the first character of the last segment of that path is the character @hl.scala{'.'}. This is slightly more verbose than Bash the bash equivalent shown above, but not by too much.
      @p
        Here is how to find the largest 3 files in a given directory tree:

      @compare(
        "find ./repl/src -ls | sort -nrk 7 | head -3",
        "ls.rec! wd/'amm/'src | (x => x.size -> x.last) sortBy (-_._1) take 3"
      )

      @p
        And lastly, here is how to perform a recursive line count of all the Scala files in your current directory tree:

      @compare(
        "find ./ops/src/main -name '*.scala' | xargs wc -l",
        """ls.rec! wd/'ops/'src/'main |? (_.ext == "scala") | read.lines | (_.size) sum"""
      )

      @p
        For more examples of how to use Ammonite's pipes, check out the section on @sect.ref{Extensions} and @sect.ref{Chaining}
    @sect{Subprocesses}
      @p
        Ammonite provides a convenient way to spawn subprocesses using the @hl.scala{%} and @hl.scala{%%} commands:

      @ul
        @li
          @hl.scala{%cmd(arg1, arg2)}: Spawn a subprocess with the command @hl.scala{cmd} and command-line arguments @hl.scala{arg1}, @hl.scala{arg2}. print out any stdout or stderr, take any input from the current console, and return the exit code when all is done.
        @li
          @hl.scala{%%cmd(arg1, arg2)}: Spawn a subprocess similar to using @hl.scala{%}, but return the stdout of the subprocess as a String, and throw an exception if the exit code is non-zero.

      @p
        For example, this is how you use the @code{bash} command to run a standalone bash script in Bash and Ammonite:

      @compare(
        "bash ops/src/test/resources/scripts/echo HELLO",
        """%bash('ops/'src/'test/'resources/'scripts/'echo, "HELLO")"""
      )
      @p
        Note that apart from quoting each path segment as a @hl.scala{'symbol}, we also need to quote @hl.scala{"HELLO"} as a string. That makes things slightly more verbose than a traditional shell, but also makes it much clearer when arguments are literals v.s. variables.

      @p
        If you are only passing a single argument, or no arguments, Scala allows you to leave off parentheses, as shown:

      @compare(
        "git branch",
        "%git 'branch"
      )
      @compare(
        "date",
        "%date"
      )

      @p
        You can use Ammonite-Ops' support for @sect.ref{Spawning Subprocesses} to call any external programs, even interactive ones like Python or SBT!

      @hl.scala
        @@ %python
        Python 2.7.6 (default, Sep  9 2014, 15:04:36)
        [GCC 4.2.1 Compatible Apple LLVM 6.0 (clang-600.0.39)] on darwin
        Type "help", "copyright", "credits" or "license" for more information.
        >>> print "Hello %s%s" % ("World", "!"*3)
        Hello World!!!
        >>> ^D
        res3: Int = 0

        @@ %sbt
        [info] Loading global plugins from /Users/haoyi/.sbt/0.13/plugins
        [info] Updating {file:/Users/haoyi/.sbt/0.13/plugins/}global-plugins...
        [info] Resolving org.fusesource.jansi#jansi;1.4 ...
        [info] Done updating.
        [info] Set current project to haoyi (in build file:/Users/haoyi/)
        >

  @sect{Scripting}
    @p
      Ammonite-Shell uses @lnk("Scala", "https://www.scala-lang.org/") as its command and scripting language. Although the commands seem short and concise, you have the full power of the language available at any time. This lets you do things that are difficult or infeasible to do when using a traditional shell like Bash.

    @sect{Scala Scripting}
      @p
        Since Ammonite-Shell runs Scala code, you can perform math:
      
      @pre(ammSample(
          """(1 + 2) * 3
            |math.pow(4, 4)
          """.stripMargin
      ))
      @p
        Assign things to values (@hl.scala{val}s):

      @pre(ammSample(
        """val x = (1 + 2) * 3
          |x + x
        """.stripMargin
      ))

      @p
        Define re-usable functions:

      @pre(ammSample(
        """def addMul(x: Int) = (x + 2) * 3
          |addMul(5)
          |addMul(5) + 1
          |addMul(5 + 1)
        """.stripMargin
      ))

      @p
        Or make use of mutable @hl.scala{var}s, conditionals or loops:
      @pre(ammSample(
        """var total = 0
          |for(i <- 0 until 100){ if (i % 2 == 0) total += 1 }
          |total
        """.stripMargin
      ))
    @sect{Typed Values}
      @p
        In Ammonite-Shell, everything is a typed value and not just a stream of bytes as is the case in Bash. That means you can assign them to variables and call methods on them just like you can in any programming language:

      @pre(ammSample(
        """val files = ls! wd
          |val count = files.length
        """.stripMargin
      ))
      @p
        As is the case in Scala, you can annotate types. 

      @pre(ammSample(
        """val files: LsSeq = ls! wd
          |val count: Int = files.length
        """.stripMargin
      ))

      @p
        This is often not required (e.g. in the earlier example), since Scala has type inference, but it may make your code clearer. Furthermore, if you make a mistake, having types annotated will help the compiler give a more specific error message.

      @p
        The fact that variables are typed means if you try to perform the wrong operation on a variable, you get an error even before the code runs:

      @pre(ammSample(
        """val files = ls! wd
          |ls + 123
        """.stripMargin
      ))

      @p
        The fact that Ammonite-Shell uses typed, structured values instead of byte streams makes a lot of things easier. For example, all the common data structures like Arrays and Maps are present:

      @pre(ammSample(
        """val numbers = Array(1, 3, 6, 10)
          |numbers(0)
          |numbers(3)
          |numbers.sum
          |numbers(3) = 100
          |numbers.sum
          |val scores = Map("txt" -> 5, "scala" -> 0)
          |scores("txt")
        """.stripMargin
      ))
      @p
        Naturally, these data structures are typed too! Trying to put the wrong sort of value inside of them results in compilation errors before the code gets a chance to run:
      @pre(ammSample(   
        """val numbers = Array(1, 3, 6, 10)
          |val myValue = "3"
          |numbers(myValue) // Doesn't work
          |numbers(1) = myValue // Also doesn't work
          | // Need to convert the string to an Int
          |numbers(myValue.toInt)
          |numbers(1) = myValue.toInt
          |numbers(1) = "2".toInt 
        """.stripMargin
      ))  
      @p    
        In general, apart from the filesystem-specific commands, you should be able to do anything you would expect to be able to do in a Scala shell or Java project. This documentation isn't intended to be a full tutorial on the Scala language, check out the @lnk("Scala Documentation", "https://www.scala-lang.org/documentation/") if you want to learn more!
    @sect{Scala/Java APIs}
      @p
        Apart from the pipe operators described in the earlier section on @sect.ref{Piping}, Ammonite-Shell allows you to call any valid Scala method on any value; it's just Scala after all! Here's an example using normal Scala collection operations to deal with a list of files, counting how many files exist for each extension:

      @pre(ammSample(
        """val allFiles = ls.rec! 'ops/'src/'test/'resources
          |val extensionCounts = allFiles.groupBy(_.ext).mapValues(_.length)
        """.stripMargin
      ))

      @p
        Any Java APIs are likewise available:

      @pre(ammSample(
        """System.out.println("Hello from Java!")
          |import java.util._
          |val date = new Date()
          |date.getDay()
        """.stripMargin
      ))

      @p
        In fact, Ammonite-Shell allows you to ask for any published third-party Java/Scala library for usage in the shell, and have them downloaded, automatically cached, and made available for use. e.g. we can load popular libraries like @lnk("Google Guava", "https://github.com/google/guava") and using it in the shell:

      @pre(ammSample(
        """import com.google.common.collect.ImmutableBiMap // Doesn't work
          |import $ivy.`com.google.guava:guava:18.0` // Load from Maven Central
          |import com.google.common.collect.ImmutableBiMap // Works now
          |val bimap = ImmutableBiMap.of(1, "one", 2, "two", 3, "three")
          |bimap.get(1)
          |bimap.inverse.get("two")
        """.stripMargin
      ))

      @p
        Or Joda Time:

      @pre(ammSample(
        """import $ivy.`joda-time:joda-time:2.8.2`
          |import org.joda.time.{DateTime, Period, Duration}
          |val dt = new DateTime(2005, 3, 26, 12, 0, 0, 0)
          |val plusPeriod = dt.plus(Period.days(1))
          |dt.plus(new Duration(24L*60L*60L*1000L))
        """.stripMargin
      ))

      @p
        See the section on @sect.ref{import $ivy} to learn more.

    @sect{Writing/Loading Scripts}
      @p
        You can write scripts in the same way you write commands, and load them using @hl.scala("import $file"). To read more about this, check out the documentation on @sect.ref{Script Files}.


  @sect{Design Decisions & Tradeoffs}
    @p
      Ammonite-Shell takes a fundamentally different architecture from traditional shells, or even more-modern shell-alternatives. Significant differences include:
    @ul
      @li
        The command & scripting language is a standard, well-known application language (@lnk("Scala", "https://www.scala-lang.org/")) rather than one specially-designed for the shell
      @li
        The shell runs on the @lnk("JVM", "https://en.wikipedia.org/wiki/Java_virtual_machine"), and can execute or integrate-with arbitrary Java/JVM code or libraries.
    @p
      In this section we'll examine each of these decisions and their consequences in turn. As the incumbents in this space, we'll be looking at traditional system shells like @lnk("Bash", "https://en.wikipedia.org/wiki/Bash_(Unix_shell)"), @lnk("Zsh", "https://en.wikipedia.org/wiki/Z_shell") or @lnk("Fish", "http://fishshell.com/"), as well as popular non-system REPLs like the Python/@lnk("IPython", "https://ipython.org/") REPL.

    @sect{Scala as the Language}
      @p
        The use of Scala as the command & scripting language is unusual among shells, for many reasons. Firstly, most shells implement their own, purpose built language: Bash, Zsh, Fish, and even more obscure ones like Xonsh each implement their own language. Secondly, all of these languages are extremely dynamic, and apart from those most popular languages with REPLs (Python, Ruby, Javascript, ...) tend to be dynamical, interpreted languages. Scala falls at the opposite end of the spectrum: statically typed and compiled.
      @p
        Scala brings many changes over using traditional dynamic, interpreted REPL languages:
      @ul
        @li
          The code being entered in the shell takes time to compile. The first command easily takes 3-4 to compile, and even when the compiler is "warm" there is a 0.2-0.3 second delay before any command begins executing.
        @li
          Once compiled, the code runs extremely fast: compute-intensive code easily runs @lnk("50-100x faster", "http://benchmarksgame.alioth.debian.org/u64q/compare.php?lang=scala&lang2=python3") in Scala vs Python or Bash, once you've paid the cost of compiling it.
        @li
          Many mistakes get caught even before a command begins executing. This is less valuable for small commands that execute quickly, but for slower commands processing more data, it is nice to get an error after 0.2s of compilation rather than 10s into execution.
      @p
        Apart from the differences between Scala and dynamic languages (Python, Ruby, etc.) for REPL usage, Scala is even further away from the sort of ad-hoc, ultra-dynamic languages most often associated with traditional shells (Bash, sh, zsh, etc.). In particular:
      @ul
        @li
          Scala provides a set of proper data structures for you to work with. Rather than just byte-streams, you have unicode @code{String}s, proper numbers like @code{Int} or @code{Double}, absolute @code{Path}s and relative @code{RelPath}s, @code{Array}s, @code{Map}s, @code{Iterator}s and all sorts of other handy data-structures. Many commands return objects which have fields: this sounds simple until you realize that none of bash/zsh/fish behave this way. 
        @li
          Scala is a general-purpose language: you can do math, you can work with Strings, you can write non-trivial algorithms quickly and easily. While this is not surprising coming from a Python REPL, these simple tasks are difficult-to-impossible in traditional system shells like Bash.
        @li
          Scala runs most code in the same process. While you can @sect.ref("Spawning Subprocesses", "shell-out to subprocesses in Ammonite") using the @code{%} syntax, most commands like @code{ls!} and @code{rm!} are simple functions living in-process rather than in separate processes. This reduces the overhead as compared to spawning new processes each time, but does cause some additional risk: if a command causes the process to crash hard, the entire shell fails. In bash, only that command would fail.
      @p
        The latter set of tradeoffs would be also present in many of the shell-replacements written in dynamic languages, like @lnk("Xonsh", "http://xonsh.org/") which is written in Python. The earlier set, on the other hand, are pretty unique to Ammonite using Scala. There are both positive and negative points in this list.

    @sect{Running on the JVM}
      @p
        Running Ammonite directly on the @lnk("JVM", "https://en.wikipedia.org/wiki/Java_virtual_machine") again is very different from how most shells work: most have their own scripting language, and their own interpreter. Most are implemented in C. What is it like running your code directly as bytecode on the JVM? Here are some of the negatives:

      @ul
        @li
          You get JVM boot time; although some of the initial several-second delay is due to the Scala compiler's slowness, some of it is also due to the cost of JVM classloading and initialization. While a hello-world JVM project loads instantly, one which uses a large number of class-files takes longer. In contrast, shells written in C load basically instantly.
        @li
          You get the JVM bloat: Ammonite, implemented in only a few thousand lines of code, wraps up to become a 30mb @code{.jar} file. That's already larger than most other shells out there, and gets >100mb larger if you bundle the JVM along with it! In general, the JVM class-file format is bloated and inefficient, and there is no way to exclude to numerous un-needed parts of the JVM during the initial download. @lnk("Project Jigsaw", "http://openjdk.java.net/projects/jigsaw/") will help with this when it finally lands in @lnk("Java 9", "http://openjdk.java.net/projects/jdk9/").
        @li
          Ammonite uses hundreds of megabytes (~500mb at last count) of memory, again orders-of-magnitude more than an interpreter written in C or Python. The JVM has traditionally been a very pointer-heavy, memory-intensive platform for running code, and it shows. @lnk("Project Valhalla", "http://openjdk.java.net/projects/valhalla/") would help with this, also scheduled to land in Java 9.

      @p
        In general, the JVM has traditionally been used as a server-side platform for long-running services, and its slow-startup and bloated disk/memory footprints are a symptom of that. Running on the JVM also has some upsides, though:

      @ul
        @li
          Ammonite code runs ridiculously fast, once you've paid 0.2-0.3s for its compilation. 50x faster than Python or Bash! This is not a trivial multiplier, and really makes a different if you're dealing with non-trivial data sets: a computation that takes a minute in Ammonite might take an hour if done at the Python REPL! This means that a moderately-large computation which may require special tools, libraries or optimizations to perform in Python might be trivial to implement naively in Ammonite while still enjoying reasonable speed.
        @li
          Ammonite can make use of any JVM APIs, and there are a lot of them! The JVM is a general-purpose platform for a general purpose language (Java), and thus has APIs for doing all sorts of things: dealing with @lnk("dates and times", "https://docs.oracle.com/javase/8/docs/api/java/time/package-summary.html"), @lnk("math", "https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html"), @lnk("networks", "https://docs.oracle.com/javase/8/docs/api/java/net/package-summary.html"), @lnk("threads", "https://docs.oracle.com/javase/8/docs/api/java/lang/Thread.html"), and many other things. While you may not always need all of these capabilities, it is nice to have them at your disposal where necessary.
        @li
          Ammonite can make use of any Java/JVM libraries, and the excellent infrastructure used by Java developers to download and manage them! Any library is just a @sect.ref{import $ivy} away. Need to parse Python source into an AST? Load @lnk("Jython", "https://search.maven.org/#search%7Cga%7C1%7Ca%3A%22jython-standalone%22") and just do it. Need a high-performance web server? Load @lnk("Akka-HTTP", "http://doc.akka.io/docs/akka-stream-and-http-experimental/1.0-M2/scala/http/"). Need some data someone stored in a YAML file? Load @lnk("SnakeYAML", "https://bitbucket.org/asomov/snakeyaml") and parse it. You don't even need to download and manage these libraries yourself: just @hl.scala{import $ivy} them from Ammonite, and Java's excellent dependency-management infrastructure will download them (along with any transitive dependencies!), cache them locally, and make them available to your code.

      @p
        There are both pros and cons with running Ammonite on the JVM: we gain its heavy startup/memory overhead, but also get access to its high-performance @lnk("JIT", "https://en.wikipedia.org/wiki/Just-in-time_compilation"), massive ecosystem of available packages.

    @sect{Goals of Ammonite-Shell}
      @p
        Overall, Ammonite-Shell blurs the line between a "programming language REPL" like IPython or Ruby's IRB and a "system shell" like Bash or Zsh. Like system shells, Ammonite-Shell provides concise filesystem operations, path-completion, and easy spawning of subprocesses. Like programming language REPLs, it provides a full-fledged, general-purpose language for you to use, rather than a crippled cut-down command-language that is available in most system shells. 

      @p
        The goal is to provide something general enough to use as both a system shell and a general-purpose programming language. Traditionally, there has always been some tension when deciding between these:

      @ul
        @li
          Should I write this script in Bash? I'm already using Bash as my shell
        @li
          It's getting complicated, I can't follow the logic in Bash. Should I re-write it in Python?
        @li
          If I write it in Python, I'll need to deal with argument-parsing and forwarding between Bash and Python and Bash, which is annoying
        @li
          Since my scripts are in Python, should I use Python/IPython as my shell instead of Bash when dealing with these things?
        @li
          But if I use Python/IPython as my shell, basic filesystem operations becomes impossible

      @p
        Traditionally, there really has been no good answer to this dilemma: whether you use Bash or Python to write your scripts, whether you use Bash or Python as your shell, there is always something frustrating about the set-up.

      @p
        With Ammonite-Shell, there is no dilemma. You can use the same concise, general-purpose language for your shell as you would for your scripts, large or small. In Ammonite-Shell, you can concisely deal with files at the command-line with the same language you use to write maintainable scripts, large or small, and the same language that you use to write rock-solid application code. 

