@import Main._
@import readme.Sample._
@import ammonite.ops._
@val fileOps = read! cwd/'ops/'src/'main/'scala/'ammonite/'ops/"FileOps.scala"

@sect("Ammonite-Ops", "A Rock-solid Filesystem Library for Scala")
  @p
    @b{Ammonite-Ops} is a library to make common filesystem operations in Scala as concise and easy-to-use as from the Bash shell, while being robust enough to use in large applications without getting messy. It lives in the same repo as the Ammonite REPL, but can easily be used stand-alone in a normal SBT/maven project.

  @p
    To get started with Ammonite-Ops, add this to your @code{build.sbt}:

  @hl.scala{libraryDependencies += "com.lihaoyi" %% "ammonite-ops" % "@ammonite.Constants.version"}

  @p
    And you're all set! Here's an example of some common operations you can do with Ammonite-Ops

  @val opsTests = 'ops/'src/'test/'scala/'test/'ammonite/'ops
  @val opsExamples = opsTests/"ExampleTests.scala"

  @hl.ref(opsExamples, Seq("longExample", "import"), "assert(")

  @p
    These examples make heavy use of Ammonite-Ops' @sect.ref{Paths}, @sect.ref{Operations} and @sect.ref{Extensions} to achieve their minimal, concise syntax.
  @p
    As you can see, Ammonite-Ops replaces the common mess of boilerplate:

  @hl.ref('ops/'src/'test/'scala/'test/'ammonite/'ops/"ExampleTests.scala", Seq("comparison", "def removeAll"), "assert(")

  @p
    With a single, sleek expression:

  @hl.ref(opsExamples, Seq("comparison", "assert", "rm!"), "assert(")

  @p
    That handles the common case for you: recursively deleting folders, not-failing if the file doesn't exist, etc.

  @sect{Paths}
    @p
      Ammonite uses strongly-typed data-structures to represent filesystem paths. The two basic versions are:

    @ul
      @li
        @code{Path}: an absolute path, starting from the root

      @li
        @code{RelPath}: a relative path, not rooted anywhere

    @p
      Generally, almost all commands take absolute @code{Path}s. These have a number of useful operations that can be performed on them. Absolute paths can be created in a few ways:

    @hl.ref(opsExamples, Seq("constructingPaths", "//"), "}")

    @p
      Note that there are no in-built operations to change the @code{pwd}. In general you should not need to: simply defining a new path, e.g.

    @hl.ref(opsExamples, Seq("newPath", "val"), "}")

    @p
      Should be sufficient for most needs.

    @p
      Above, we made use of the @hl.scala{pwd} built-in path. There are a number of @hl.scala{Path}s built into Ammonite:

    @ul
      @li
        @hl.scala{pwd}: The current working directory of the process. This can't be changed in Java, so if you need another path to work with the convention is to define a @hl.scala{wd} variable.
      @li
        @hl.scala{root}: The root of the filesystem.
      @li
        @hl.scala{home}: The home directory of the current user.
      @li
        @hl.scala{tmp()}/@hl.scala{tmp.dir()}: Creates a temporary file/folder and returns the path.

    @sect{RelPaths}
      @p
        @hl.scala{RelPath}s represent relative paths. These are basically the same data structure as @hl.scala{Path}s, except that they can represent a number of @hl.scala{up}s before the relative path is applied. They can be created in the following ways:

      @hl.ref(opsExamples, Seq("relPaths", "//"), ":")

      @p
        In general, very few APIs take relative paths. Their main purpose is to be combined with absolute paths in order to create new absolute paths. e.g.

      @hl.ref(opsExamples, Seq("relPathCombine", "val"), "}")

      @p
        @hl.scala{up} is a relative path that comes in-built:

      @hl.ref(opsExamples, Seq("relPathUp", "val"), "}")

      @p
        Note that all paths, both relative and absolute, are always expressed in a canonical manner:

      @hl.ref(opsExamples, Seq("canonical", "assert"), "}")

      @p
        So you don't need to worry about canonicalizing your paths before comparing them for equality or otherwise manipulating them.

    @sect{Path Operations}

      @p
        Ammonite's paths are transparent data-structures, and you can always access the @hl.scala{segments} and @hl.scala{ups} directly. Nevertheless, Ammonite defines a number of useful operations that handle the common cases of dealing with these paths.

      @p
        In this definition, @hl.scala{ThisType} represents the same type as the current path; e.g. a @hl.scala{Path}'s @hl.scala{/} returns a @hl.scala{Path} while a @hl.scala{RelPath}'s @hl.scala{/} returns a @hl.scala{RelPath}. Similarly, you can only compare or subtract paths of the same type.

      @p
        Apart from @hl.scala{RelPath}s themselves, a number of other data structures are convertible into @hl.scala{RelPath}s when spliced into a path using @hl.scala{/}:

      @ul
        @li
          @hl.scala{String}s
        @li
          @hl.scala{Symbol}s
        @li
          @hl.scala{Array[T]}s where @hl.scala{T} is convertible into a @hl.scala{RelPath}
        @li
          @hl.scala{Seq[T]}s where @hl.scala{T} is convertible into a @hl.scala{RelPath}

    @sect{Constructing Paths}
      @p
        Apart from built-ins like @hl.scala{pwd} or @hl.scala{root} or @hl.scala{home}, you can also construct Ammonite's @hl.scala{Path}s from @hl.scala{String}s, @hl.scala{java.io.File}s or @hl.scala{java.nio.file.Path}s:

      @hl.ref(opsTests/"PathTests.scala", Seq("construction", "success", "", ""))

      @p
        Trying to construct invalid paths fails with exceptions:

      @hl.ref(opsTests/"PathTests.scala", Seq("construction", "failure", "", ""))
      @p
        As you can see, attempting to parse a relative path with @hl.scala{Path} or an absolute path with @hl.scala{RelPath} throws an exception. If you're uncertain about what kind of path you are getting, you could use @hl.scala{BasePath} to parse it:

      @hl.ref(opsTests/"PathTests.scala", Seq("construction", "basepath", "", ""))

      @p
        This converts it into a @hl.scala{BasePath}, which is either a @hl.scala{Path} or @hl.scala{RelPath}. It's then up to you to pattern-match on the types and decide what you want to do in each case.

      @p
        You can also pass in a second argument to @hl.scala{Path(..., base)}. If the path being parsed is a relative path, this @hl.scala{base} will be used to coerce it into an absolute path:

      @hl.ref(opsTests/"PathTests.scala", Seq("construction", "based", "", ""))

      @p
        For example, if you wanted the common behavior of converting relative paths to absolute based on your current working directory, you can pass in @hl.scala{pwd} as the second argument to @hl.scala{Path(...)}. Apart from passing in @hl.scala{String}s or @hl.scala{java.io.File}s or @hl.scala{java.nio.file.Path}s, you can also pass in @hl.scala{BasePath}s you parsed early as a convenient way of converting it to a absolute path, if it isn't already one.

      @hr

      @p
        In general, Ammonite is very picky about the distinction between relative and absolute paths, and doesn't allow "automatic" conversion between them based on current-working-directory the same way many other filesystem APIs (Bash, Java, Python, ...) do. Even in cases where it's uncertain, e.g. you're taking user input as a @hl.scala{String}, you have to either handle both possibilities with @hl.scala{BasePath} or explicitly choose to convert relative paths to absolute using some base.
      @p
        While this adds some boilerplate, it should overall result in more robust filesystem code that doesn't contain bugs like @lnk("this one", "https://github.com/valvesoftware/steam-for-linux/issues/3671").

  @sect{Operations}
    @p
      @sect.ref{Paths} not aren't interesting on their own, but serve as a base to use to perform filesystem operations in a concise and easy to use way. Here is a quick tour of the core capabilities that Ammonite-Ops provides:

    @hl.ref(opsExamples, Seq("""test("reference")""", "import"))

    @p
      In these definitions, @hl.scala{Op1} and @hl.scala{Op2} are isomorphic to @hl.scala{Function1} and @hl.scala{Function2}. The main difference is that ops can be called in two ways:

    @hl.scala
      rm(filepath)
      rm! filepath

    @p
      The latter syntax allows you to use it more easily from the command line, where remembering to close all your parenthesis is a hassle. Indentation signifies nesting, e.g. in addition to @hl.scala{write!} you also have @hl.scala{write.append!} and @hl.scala{write.over!}

    @sect{Operator Reference}
      @p
        All of these operations are pre-defined and strongly typed, so feel free to jump to their implementation to look at what they do or what else is available. Here's a shortlist of the one that may interest you:

      @ul
        @val docBase = "https://ammonite.io/api/ops/index.html#ammonite.ops."
        @li
          @hl.scala{ls! path} @a("[doc]", href := (docBase+ "ls$")) returning @hl.scala{Vector[Path]}, and @hl.scala{ls.iter! path} returning a @hl.scala{Iterator[Path]}
        @li
          @hl.scala{ls.rec! path} @a("[doc]", href := (docBase+ "ls$$rec$")) and @hl.scala{ls.rec.iter!}
        @li
          @hl.scala{read! path} @a("[doc]", href := (docBase+ "read$")) returning a @hl.scala{String}, and @hl.scala{read.lines! path} and @hl.scala{read.bytes! path} returning @hl.scala{Seq[String]} and @hl.scala{Array[Byte]}. You can also use the various @code{read!} commands for @sect.ref{Reading Resources} or reading @hl.scala{java.io.InputStream}s
        @li
          @hl.scala{write(path, contents)}, @a("[doc]", href := (docBase+ "write$")), which lets you write @hl.scala{String}s, @hl.scala{Array[Byte]}s, and @hl.scala{Seq}s of those
        @li
          @hl.scala{rm! path}, @a("[doc]", href := (docBase+ "rm$")), roughly Bash's @code{rm -rf}
        @li
          @hl.scala{mv(src, dest)}, @a("[doc]", href := (docBase+ "mv$"))
        @li
          @hl.scala{cp(src, dest)}, @a("[doc]", href := (docBase+ "cp$")), roughly Bash's @code{cp -r}
        @li
          @hl.scala{exists! path}, @a("[doc]", href := (docBase+ "exists$"))
        @li
          @hl.scala{stat! path}, @a("[doc]", href := (docBase+ "stat$"))
        @li
          @hl.scala{stat.posix! path}, @a("[doc]", href := (docBase+ "stat$$posix$"))
        @li
          @hl.scala{ln(src, dest)}, @a("[doc]", href := (docBase+ "ln$"))
        @li
          @hl.scala{kill(9)! processId}, @a("[doc]", href := (docBase+ "kill"))

      @p
        In general, each operator has sensible/safe defaults:

      @ul
        @li
          @hl.scala{rm} and @hl.scala{cp} are recursive
        @li
          @hl.scala{rm} ignores the file if it doesn't exist
        @li
          all operations that create a file or folder (@hl.scala{mkdir}, @hl.scala{write}, @hl.scala{mv}) automatically create any necessary parent directories
        @li
          @hl.scala{write} also does @i{not} stomp over existing files by default. You need to use @hl.scala{write.over}
      @p
        In general, this should make these operations much easier to use; the defaults should cover the 99% use case without needing any special flags or fiddling.


    @sect{Extensions}
      @p
        Ammonite-Ops contains a set of extension methods on common types, which serve no purpose other than to make things more concise. These turn Scala from a "relatively-concise" language into one as tight as Bash scripts, while still maintaining the high level of type-safety and maintainability that comes with Scala code.

      @sect{Traversable}
        @p
          These extensions apply to any @hl.scala{Traversable}: @hl.scala{Seq}s, @hl.scala{List}s, @hl.scala{Array}s, and others.
        @ul
          @li
            @hl.scala{things | f} is an alias for @hl.scala{things map f}
          @li
            @hl.scala{things || f} is an alias for @hl.scala{things flatMap f}
          @li
            @hl.scala{things |? f} is an alias for @hl.scala{things filter f}
          @li
            @hl.scala{things |& f} is an alias for @hl.scala{things reduce f}
          @li
            @hl.scala{things |! f} is an alias for @hl.scala{things foreach f}
        @p
          These should behave exactly the same as their implementations; their sole purpose is to make things more concise at the command-line.

      @sect{Pipeable}
        @ul
          @li
            @hl.scala{thing |> f} is an alias for @hl.scala{f(thing)}

        @p
          This lets you flip around the function and argument, and fits nicely into the Ammonite's @hl.scala{|} pipelines.

      @sect{Callable}
        @ul
          @li
            @hl.scala{f! thing} is an alias for @hl.scala{f(thing)}

        @p
          This is another syntax-saving extension, that makes it easy to call functions without having to constantly be opening and closing brackets. It does nothing else.

    @sect{Chaining}
      @p
        The real value of Ammonite is the fact that you can pipe things together as easily as you could in Bash. No longer do you need to write reams of boilerplate to accomplish simple tasks. Some of these chains are listed at the top of this readme, here are a few more fun examples:

      @hl.ref(opsExamples, Seq("longExample", "// Chains", "// Move all files"), "assert(")

      @p
        As you can see, you can often compose elaborate operations entirely naturally using the available pipes, without needing to remember any special flags or techniques.

      @p
        Here's another example:

      @hl.ref(opsExamples, Seq("noLongLines", ""))

    @sect{Reading Resources}
      @p
        You can also manipulate @code{resource} paths in order to read resources from the Java classpath. 
        By default, the path used to load resources is absolute, using the @hl.scala{Thread.currentThread().getContextClassLoader}. You can also pass in a classloader explicitly to the @hl.scala{resource} call:
  
      @hl.ref(opsTests/"OpTests.scala", Seq("readResource", "absolute", ""))
  
      @p
        If you want to load resources relative to a particular class, pass in a class for the resource to be relative, or @hl.scala{getClass} to get something relative to the current class.
  
      @hl.ref(opsTests/"OpTests.scala", Seq("readResource", "relative", ""))
  
      @p
        In both cases, reading resources is performed as if you did not pass a leading slash into the @hl.scala{getResource("foo/bar")} call. In the case of @hl.scala{ClassLoader#getResource}, passing in a leading slash is never valid, and in the case of @hl.scala{Class#getResource}, passing in a leading slash is equivalent to calling @hl.scala{getResource} on the @hl.scala{ClassLoader}.
      @p
        Ammonite-Ops ensures you only use the two valid cases in the API, without a leading slash, and not the two cases with a leading slash which are redundant (in the case of @hl.scala{Class#getResource}, which can be replaced by @hl.scala{ClassLoader#getResource}) or invalid (a leading slash with @hl.scala{ClassLoader#getResource})
      @p
        Note that you can only @hl.scala{read!} from paths; you can't write to them or perform any other filesystem operations on them, since they're not really files.
      @p
        Note also that resources belong to classloaders, and you may have multiple classloaders in your application e.g. if you are running in a servlet or REPL. Make sure you use the correct classloader (or a class belonging to the correct classloader) to load the resources you want, or else it might not find them.
  
    @sect{Spawning Subprocesses}
      @p
        Ammonite-Ops provides easy syntax for anyone who wants to spawn sub-processes, e.g. commands like @code{ls} or @code{git commit -am "wip"}. This is provided through the @hl.scala{%} and @hl.scala{%%} operators, which are used as follows:
  
      @hl.scala
        @@ import ammonite.ops._
        @@ import ammonite.ops.ImplicitWd._
        @@ %ls
        build.sbt	log		ops		readme		repl		terminal
        echo		modules		project		readme.md	target		shell
        res2: Int = 0
        @@ %%('ls)
        res3: CommandResult =
        build.sbt
        echo
        log
        modules
        ops
        project
        readme
        readme.md
        repl
        target
        terminal
        ...
  
      @p
        In short, @hl.scala{%} lets you run a command as you would in bash, and dumps the output to standard-out in a similar way, returning the zero return-code upon successful command completion. This lets you run @code{git} commands, edit files via @code{vim}, open @code{ssh} sessions or even start @code{SBT} or @code{Python} shells right from your Scala REPL!
      @p
        @hl.scala{%} throws an @hl.scala{InteractiveShelloutException} if the return-code is non-zero.
      @p
        @hl.scala{%%} on the other hand is intended for programmatic usage: rather than printing to stdout, it returns a @hl.scala{CommandResult}, which contains the standard output @hl.scala{.out} and standard error @hl.scala{.err} of the subprocess. These provide helper methods to retrieve the stdout or stderr as a list of lines
  
      @hl.ref(opsTests/"ShelloutTests.scala", Seq("""test("lines")""", ""))
  
      @p
        Or as a single string:
  
      @hl.ref(opsTests/"ShelloutTests.scala", Seq("""test("string")""", ""))
  
      @p
        Or as an array of bytes:
  
      @hl.ref(opsTests/"ShelloutTests.scala", Seq("""test("bytes")""", ""))
  
      @p
        @hl.scala{%%} throws an @hl.scala{ShelloutException} containing the @hl.scala{CommandResult} if the return-code is non-zero.
  
      @hl.ref(opsTests/"ShelloutTests.scala", Seq("""test("failures")""", ""))
  
      @p
        In both cases, you end up with a @hl.scala{CommandResult} can then be used however you like.
      @p
        You can also use backticks to execute commands which aren't valid Scala identifiers, e.g.
  
      @hl.scala
        @@ %`ssh-add`
        Enter passphrase for /Users/haoyi/.ssh/id_rsa:
  
      @p
        Lastly, you can also pass arguments into these subprocess calls, as Strings, Symbols or Seqs of Strings:
      @hl.scala
        @@ %git 'branch
          gh-pages
          history
        * master
          speedip
        res4: Int = 0
  
        @@ %%('git, 'branch)
        res5: CommandResult =
          gh-pages
          history
        * master
          speedip
  
        @@ %%('git, 'checkout, "master")
        Already on 'master'
        res6: CommandResult =
        M	readme/Index.scalatex
        Your branch is up-to-date with 'origin/master'.
  
        @@ %git("checkout", 'master)
        M	readme/Index.scalatex
        Already on 'master'
        Your branch is up-to-date with 'origin/master'.
        res8: Int = 0
  
        @@ val stuff = List("readme.md", "build.sbt")
        stuff: List[String] = List("readme.md", "build.sbt")
        @@ %('ls, '".gitignore", stuff)
        .gitignore	build.sbt	readme.md
      @p
        Ammonite-Ops currently does not provide many convenient ways of piping together multiple processes, but support may come in future if someone finds it useful enough to implement.
  
      @p
        @hl.scala{%} calls subprocesses in a way that is compatible with a normal terminal. That means you can easily call things like @hl.scala{%vim} to open a text editor, @hl.scala{%python} to open up a Python terminal, or @hl.scala{%sbt} to open up the SBT prompt!
      @hl.scala
        @@ %python
        Python 2.7.6 (default, Sep  9 2014, 15:04:36)
        [GCC 4.2.1 Compatible Apple LLVM 6.0 (clang-600.0.39)] on darwin
        Type "help", "copyright", "credits" or "license" for more information.
        >>> print "Hello %s%s" % ("World", "!"*3)
        Hello World!!!
        >>> ^D
        res3: Int = 0
  
        @@ %sbt
        [info] Loading global plugins from /Users/haoyi/.sbt/0.13/plugins
        [info] Updating {file:/Users/haoyi/.sbt/0.13/plugins/}global-plugins...
        [info] Resolving org.fusesource.jansi#jansi;1.4 ...
        [info] Done updating.
        [info] Set current project to haoyi (in build file:/Users/haoyi/)
        >
  
      @p
        @hl.scala{%%} does not do this.
  
      @sect{Environment Variables}
        @p
          Ammonite lets you pass in environment variables to subprocess calls; just pass them in as named arguments when you invoke the subprocess ia @code{%} or @code{%%}:
  
        @hl.ref(opsTests/"ShelloutTests.scala", Seq("""test("envArgs")""", "val"))
  
      @sect{Invoking Files}
        @p
          You can invoke files on disk using @code{%} and @code{%%} the same way you can invoke shell commands:
  
        @hl.ref(opsTests/"ShelloutTests.scala", Seq("""test("filebased")""", "val"))
  
      @sect{Current Working Directory}
        @p
          In Ammonite the current working directory is not a side-effect unlike in bash. Instead it is an argument to the command you are invoking. It can be passed in explicitly or implicitly.
  
        @hl.ref(opsTests/"ShelloutTests.scala", Seq("""test("customWorkingDir")""", ""))
  
        @p
          Note how passing it in explicitly, you need to use a @code{.} before the command-name in order for it to parse properly. That's a limitation of the Scala syntax that isn't likely to change. Another limitation is that when invoking a file, you need to call @code{.apply} explicitly rather than relying on the plain-function-call syntax:
  
        @hl.ref(opsTests/"ShelloutTests.scala", Seq("""test("fileCustomWorkingDir")""", ""))
