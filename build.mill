package build
// plugins
import $ivy.`com.lihaoyi::mill-contrib-bloop:$MILL_VERSION`
import $ivy.`io.get-coursier::coursier-launcher:2.1.0-RC1`
import $file.ci.upload
import $packages._

// imports
import java.util.concurrent.atomic.AtomicInteger
import scala.concurrent.{Await, ExecutionContext, Future, duration}
import scala.util.chaining.scalaUtilChainingOps
import mill._
import mill.api.Result
import mill.contrib.bloop.Bloop
import mill.define.Command
import mill.main.Tasks
import mill.scalalib._
import mill.scalalib.publish._
import mill.scalalib.api.JvmWorkerUtil._

val ghOrg = "com-lihaoyi"
val ghRepo = "Ammonite"
val masterBranch = "main"
val publishBranches = Seq(masterBranch, "2.x")
val homePage = "https://ammonite.io"

val isMasterCommit =
  sys.env.get("GITHUB_REPOSITORY").contains(s"$ghOrg/$ghRepo") &&
    sys.env.get("GITHUB_REF").exists(x => x.endsWith(s"/$masterBranch"))

val latestTaggedVersion =
  try {
    os.proc("git", "describe", "--abbrev=0", "--tags").call().out.trim()
  } catch {
    case e: os.SubprocessException =>
      "dev"
  }

val gitHead = os.proc("git", "rev-parse", "HEAD").call().out.trim()

val commitsSinceTaggedVersion = latestTaggedVersion match {
  case "dev" => 0
  case latest =>
    os.proc("git", "rev-list", gitHead, "--not", latest, "--count")
      .call()
      .out
      .trim()
      .toInt
}

//val isJava21 = scala.util.Properties.isJavaAtLeast(21).tap {
//  if (_) println("Java 21+: Skip building of modules requiring incompatible Scala versions")
//}

val scala2_12Versions = 9.to(20)
//  .dropWhile(v => isJava21 && v < 18)
  .map(v => s"2.12.$v")
val scala2_13Versions = 3.to(17)
//  .dropWhile(v => isJava21 && v < 11)
  .map(v => s"2.13.$v")
// TODO: We can't have 3.4.0 & 3.4.1 until we solve https://github.com/com-lihaoyi/Ammonite/issues/1395
val scala33Versions = Seq("3.3.4", "3.3.5")
val scala34Versions = Seq("3.4.2", "3.4.3")
val scala35Versions = Seq("3.5.0", "3.5.1", "3.5.2")
val scala36Versions = Seq("3.6.2", "3.6.3")

val scala2Versions = scala2_12Versions ++ scala2_13Versions
val scala3Versions = scala33Versions ++ scala34Versions ++ scala35Versions ++ scala36Versions

val binCrossScalaVersions =
  Seq(scala2_12Versions.last, scala2_13Versions.last, scala33Versions.last)
val assemblyCrossScalaVersions = Seq(
  scala2_12Versions.last,
  scala2_13Versions.last,
  scala33Versions.last,
  scala34Versions.last,
  scala35Versions.last,
  scala36Versions.last
)
def isScala2_12_10OrLater(sv: String): Boolean = {
  (sv.startsWith("2.12.") && sv.stripPrefix("2.12.").length > 1) || sv.startsWith("2.13.")
}
val fullCrossScalaVersions = scala2Versions ++ scala3Versions

val latestAssemblies = assemblyCrossScalaVersions.map(amm(_).assembly)

println("GITHUB REF " + sys.env.get("GITHUB_REF"))

val (buildVersion, unstable) = scala.util.Try(
  os.proc("git", "describe", "--exact-match", "--tags", "--always", gitHead)
    .call()
    .out
    .trim()
).toOption match {
  case None =>
    val gitHash = os.proc("git", "rev-parse", "--short", "HEAD").call().out.trim()
    (s"$latestTaggedVersion-$commitsSinceTaggedVersion-$gitHash", true)
  case Some(tagName) => (tagName, false)
}

val bspVersion = "2.1.1"
val fastparseVersion = "3.1.1"
val scalametaVersion = "4.13.10"

object Deps {
  val acyclic = mvn"com.lihaoyi:::acyclic:0.3.19"
  val bsp4j = mvn"ch.epfl.scala:bsp4j:$bspVersion"
  val bcprovJdk15on = mvn"org.bouncycastle:bcprov-jdk18on:1.82"
  val cask = mvn"com.lihaoyi::cask:0.10.2"
  val classPathUtil = mvn"io.get-coursier::class-path-util:0.1.4"
  val coursierInterface = mvn"io.get-coursier:interface:1.0.28"
  val coursierDependencyInterface = mvn"io.get-coursier::dependency-interface:0.3.2"
  val fansi = mvn"com.lihaoyi::fansi:0.5.1"
  val fastparse = mvn"com.lihaoyi::fastparse:$fastparseVersion"
  val geny = mvn"com.lihaoyi::geny:1.1.1"
  val javaparserCore = mvn"com.github.javaparser:javaparser-core:3.2.12"
  val javassist = mvn"org.javassist:javassist:3.21.0-GA"
  val jlineJna = mvn"org.jline:jline-terminal-jna:3.14.1"
  val jlineReader = mvn"org.jline:jline-reader:3.14.1"
  val jlineTerminal = mvn"org.jline:jline-terminal:3.14.1"
  val jsch = mvn"com.jcraft:jsch:0.1.55"
  val mainargs = mvn"com.lihaoyi::mainargs:0.7.6"
  val osLib = mvn"com.lihaoyi::os-lib:0.11.5"
  val pprint = mvn"com.lihaoyi::pprint:0.9.4"
  val requests = mvn"com.lihaoyi::requests:0.9.0"
  val scalacheck = mvn"org.scalacheck::scalacheck:1.18.1"
  val scalaCollectionCompat = mvn"org.scala-lang.modules::scala-collection-compat:2.14.0"
  def scalaCompiler(scalaVersion: String) = mvn"org.scala-lang:scala-compiler:$scalaVersion"
  val scalaJava8Compat = mvn"org.scala-lang.modules::scala-java8-compat:1.0.2"
  val scalaparse = mvn"com.lihaoyi::scalaparse:$fastparseVersion"
  def scalaReflect(scalaVersion: String) = mvn"org.scala-lang:scala-reflect:$scalaVersion"
  def scalaXml(sv: String): Dep = {
    val ver =
      if (sv.startsWith("2.12.")) "1.3.0"
      else "2.0.1"
    mvn"org.scala-lang.modules::scala-xml:$ver"
  }
  val scalazCore = mvn"org.scalaz::scalaz-core:7.2.36"
  val semanticDbScalac = mvn"org.scalameta:::semanticdb-scalac:$scalametaVersion"
  val shapeless = mvn"com.chuusai::shapeless:2.3.3"
  val slf4jNop = mvn"org.slf4j:slf4j-nop:2.0.17"
  val sourcecode = mvn"com.lihaoyi::sourcecode:0.4.4"
  val sshdCore = mvn"org.apache.sshd:sshd-core:1.2.0"
  val scalametaSemantidbShared = mvn"org.scalameta::semanticdb-shared:$scalametaVersion"
  val scalametaSemantidbShared213 = mvn"org.scalameta:semanticdb-shared_2.13:$scalametaVersion"
  val typename = mvn"org.tpolecat::typename:1.1.0"
  val upickle = mvn"com.lihaoyi::upickle:4.3.2"

  val utest = mvn"com.lihaoyi::utest:0.8.9"
}

trait AmmInternalModule extends CrossSbtModule with Bloop.Module {
  // We need it to be a Boolean, not T[Boolean]
  def isCrossFullScalaVersion: Boolean = false
  def crossFullScalaVersion: T[Boolean] = T { isCrossFullScalaVersion }
  def skipBloop: Boolean = {
    val versions =
      if (isCrossFullScalaVersion) assemblyCrossScalaVersions else binCrossScalaVersions
    // no need to expose the modules for old Scala versions support in Bloop / Metals
    !versions.contains(crossScalaVersion)
  }
  def artifactName: T[String] = T {
    "ammonite-" + millOuterCtx.segments.parts.mkString("-").stripPrefix("amm-")
  }
  def isScala2: T[Boolean] = T { scalaVersion().startsWith("2.") }
  def scalacOptions: T[Seq[String]] = T {
    if (isScala2()) Seq("-P:acyclic:force")
    else Nil
  }
  def compileIvyDeps: T[Agg[Dep]] = T {
    if (isScala2()) Agg(Deps.acyclic)
    else Agg[Dep]()
  }
  def scalacPluginIvyDeps: T[Agg[Dep]] = T {
    if (isScala2()) Agg(Deps.acyclic)
    else Agg[Dep]()
  }
  override def scalaLibraryIvyDeps: T[Agg[Dep]] = T {
    val scalaV = scalaVersion()
    val scalaO = scalaOrganization()
    if (isScala3(scalaV)) Agg(
      mvn"$scalaO::scala3-library:$scalaV"
    )
    else Agg(
      mvn"$scalaO:scala-library:$scalaV"
    )
  }
  trait AmmTests extends super.CrossSbtTests with TestModule.Utest {
    def ivyDeps: T[Agg[Dep]] = super.ivyDeps() ++ Agg(Deps.utest)
    def forkArgs: T[Seq[String]] = Seq("-Xmx2g", "-Dfile.encoding=UTF8")
    def testForkGrouping: T[Seq[Seq[String]]] = discoveredTestClasses().grouped(1).toSeq
    def testSandboxWorkingDir: T[Boolean] = false
  }
  def allBoundIvyDeps: T[Agg[BoundDep]] =
    T { (allIvyDeps() ++ scalaLibraryIvyDeps()).map(bindDependency()) }
  def sources: T[Seq[PathRef]] = Task.Sources {
    val sv = scalaVersion()
    val extraDir =
      if (sv.startsWith("2.12.")) {
        val patch = sv.stripPrefix("2.12.").takeWhile(_.isDigit).toInt
        val dirName0 = if (patch <= 8) "scala-2.12.0_8" else "scala-2.12.9+"
        val dirNames1 = if (patch <= 12) Seq("scala-2.12.0_12") else Nil
        val dirNames = Seq(dirName0) ++ dirNames1
        dirNames.map(dirName => PathRef(moduleDir / "src" / "main" / dirName))
      } else
        Nil

    val extraDir2 =
      if (isScala2())
        Seq(PathRef(
          if (isScala2_12_10OrLater(sv)) moduleDir / "src" / "main" / "scala-2.12.10-2.13.1+"
          else moduleDir / "src" / "main" / "scala-not-2.12.10-2.13.1+"
        ))
      else Nil
    val extraDir3 =
      if (isScala2()) {
        val dir =
          if (
            sv.startsWith("2.13.") && sv.stripPrefix("2.13.").toInt >= 1 && sv.stripPrefix(
              "2.13."
            ).toInt <= 11
          )
            moduleDir / "src" / "main" / "scala-2.13.1-2.13.11"
          else if (sv.startsWith("2.13.") && sv.stripPrefix("2.13.").toInt >= 12)
            moduleDir / "src" / "main" / "scala-2.13.12+"
          else if (sv.startsWith("2.12.") && sv.stripPrefix("2.12.").toInt >= 13)
            moduleDir / "src" / "main" / "scala-2.12.13+"
          else
            moduleDir / "src" / "main" / "scala-not-2.12.13+-2.13.1+"
        Seq(PathRef(dir))
      } else Nil
    val extraDir4 =
      if (sv.startsWith("2.13.") || sv.startsWith("3."))
        Seq(PathRef(moduleDir / "src" / "main" / "scala-2.13-or-3"))
      else Nil
    val extraDir5 =
      if (sv.startsWith("3.5") || sv.startsWith("3.6"))
        Seq(PathRef(moduleDir / "src" / "main" / "scala-3.5.0+"))
      else if (sv.startsWith("3.4"))
        if (sv.stripPrefix("3.4.").toInt < 2)
          sys.error("Scala 3.4.0 and 3.4.1 are incompatible with Ammonite")
        else
          Seq(PathRef(moduleDir / "src" / "main" / "scala-3.4.2+"))
      else if (sv.startsWith("3.3") && sv.stripPrefix("3.3.").toInt >= 2)
        Seq(PathRef(moduleDir / "src" / "main" / "scala-3.3.2+"))
      else if (sv.startsWith("3"))
        Seq(PathRef(moduleDir / "src" / "main" / "scala-3.0.0-3.3.1"))
      else Nil
    val extraDir6 =
      if (sv.startsWith("3"))
        if (sv.startsWith("3.6.") && sv.stripPrefix("3.6.").toInt >= 3)
          Seq(PathRef(moduleDir / "src" / "main" / "scala-3.6.3+"))
        else
          Seq(PathRef(moduleDir / "src" / "main" / "scala-3.0.0-3.6.2"))
      else Nil

    super.sources() ++ extraDir ++ extraDir2 ++ extraDir3 ++ extraDir4 ++ extraDir5 ++ extraDir6
  }
  def externalSources: T[Agg[PathRef]] = T {
    resolveDeps(allBoundIvyDeps, sources = true, artifactTypes = None)()
  }
  def repositoriesTask = Task.Anon {
    super.repositoriesTask() ++ Seq(
      coursier.maven.MavenRepository("https://scala-ci.typesafe.com/artifactory/scala-integration")
    )
  }
  override implicit def crossSbtModuleResolver: mill.define.Cross.Resolver[CrossModuleBase] =
    new mill.define.Cross.Resolver[CrossModuleBase] {
      def resolve[V <: CrossModuleBase](c: Cross[V]): V = {
        crossScalaVersion
          .split('.')
          .inits
          .filter { v =>
            if (isScala3(crossScalaVersion)) v.length != 2 else v.length != 1
          }
          .flatMap(prefix =>
            c.items
              .map(_.module.value)
              .find(_.crossScalaVersion.split('.').startsWith(prefix))
          )
          .collectFirst { case x => x }
          .getOrElse {
            throw new Exception(
              s"Unable to find compatible cross version between $crossScalaVersion and " +
                c.items.map(_.module.value.crossScalaVersion).mkString(",")
            )
          }

      }
    }
}
trait AmmModule extends AmmInternalModule with PublishModule {
  def publishVersion: T[String] = buildVersion
  def pomSettings = PomSettings(
    description = artifactName(),
    organization = "com.lihaoyi",
    url = s"https://github.com/${ghOrg}/${ghRepo}",
    licenses = Seq(License.MIT),
    versionControl = VersionControl.github(ghOrg, ghRepo),
    developers = Seq(
      Developer("lihaoyi", "Li Haoyi", "https://github.com/lihaoyi")
    )
  )

  def transitiveJars: T[Seq[PathRef]] = T {
    mill.define.Target.traverse(this +: moduleDeps)(m =>
      Task.Anon { m.jar() }
    )()
  }

  def transitiveSourceJars: T[Agg[PathRef]] = T {
    mill.define.Target.traverse(this +: moduleDeps)(m =>
      Task.Anon { m.sourceJar() }
    )()
  }

  override def javacOptions: T[Seq[String]] = Seq("-source", "1.8", "-target", "1.8")
}
trait AmmDependenciesResourceFileModule extends JavaModule {
  def dependencyResourceFileName: String
  def dependencyFileResources: T[Seq[PathRef]] = T {
    val deps0 = Task.Anon { (compileIvyDeps() ++ allIvyDeps()).map(bindDependency()) }()
    val result = mill.util.Jvm.resolveDependenciesMetadataSafe(
      repositoriesTask(),
      deps0.map(_.dep),
      deps0.filter(_.force).map(_.dep),
      mapDependencies = Some(mapDependencies())
    )

    result match {
      case Result.Success(r) =>
        Seq(PathRef(generateDependenciesFile(
          dependencyResourceFileName,
          r.minDependencies.toSeq
        )))
      case _ => Nil
    }
  }

  def resources: T[Seq[PathRef]] = T.sources {
    super.resources() ++ dependencyFileResources()
  }
}

object terminal extends Cross[TerminalModule](binCrossScalaVersions)
trait TerminalModule extends AmmModule {
  def ivyDeps: T[Agg[Dep]] = T {
    super.ivyDeps() ++ Agg(
      Deps.fansi,
      Deps.sourcecode
    )
  }
  object test extends AmmTests {
    def ivyDeps: T[Agg[Dep]] = super.ivyDeps() ++ Agg(Deps.sourcecode)
  }
}

object amm extends Cross[MainModule](fullCrossScalaVersions) {
  object util extends Cross[UtilModule](binCrossScalaVersions)
  trait UtilModule extends AmmModule {
    def moduleDeps: Seq[PublishModule] = Seq()
    def ivyDeps: T[Agg[Dep]] = T {
      super.ivyDeps() ++ Agg(
        Deps.osLib,
        Deps.typename,
        Deps.scalaCollectionCompat,
        Deps.fansi,
        Deps.pprint
      )
    }
    def compileIvyDeps: T[Agg[Dep]] = super.compileIvyDeps() ++
      (if (isScala3(crossScalaVersion)) Agg.empty[Dep] else Agg(Deps.scalaReflect(scalaVersion())))
  }

  object runtime extends Cross[RuntimeModule](fullCrossScalaVersions)
  trait RuntimeModule extends AmmModule {
    def moduleDeps: Seq[PublishModule] = Seq(amm.util(), interp.api(), amm.repl.api())
    def isCrossFullScalaVersion = true
    def ivyDeps: T[Agg[Dep]] = super.ivyDeps() ++ Agg(
      Deps.classPathUtil,
      Deps.upickle,
      Deps.requests,
      Deps.mainargs,
      Deps.coursierDependencyInterface
    )
  }

  object compiler extends Cross[CompilerModule](fullCrossScalaVersions) {
    object interface extends Cross[CompilerInterfaceModule](fullCrossScalaVersions)
    trait CompilerInterfaceModule extends AmmModule {
      def isCrossFullScalaVersion = true
      def moduleDeps: Seq[PublishModule] = Seq(amm.util())
      def exposedClassPath: T[Seq[PathRef]] = T {
        runClasspath() ++
          externalSources() ++
          transitiveJars() ++
          transitiveSourceJars()
      }
    }
  }
  trait CompilerModule extends AmmModule {
    def supports3 = true
    def moduleDeps: Seq[PublishModule] =
      Seq(amm.compiler.interface(), amm.util(), amm.repl.api())
    def isCrossFullScalaVersion = true
    def ivyDeps: T[Agg[Dep]] = T {
      val scalaSpecificDeps =
        if (isScala2())
          Agg(
            Deps.scalaCompiler(scalaVersion()),
            Deps.scalaparse,
            Deps.scalaXml(scalaVersion())
          )
        else
          Agg[Dep](
            mvn"org.scala-lang::scala3-compiler:${scalaVersion()}",
            mvn"org.ow2.asm:asm:9.9"
          )
      super.ivyDeps() ++ scalaSpecificDeps ++ Agg(
        Deps.javassist,
        Deps.javaparserCore
      )
    }

    def exposedClassPath: T[Seq[PathRef]] = T {
      runClasspath() ++
        externalSources() ++
        transitiveJars() ++
        transitiveSourceJars()
    }

    object test extends AmmTests
  }

  object interp extends Cross[InterpModule](fullCrossScalaVersions) {
    object api extends Cross[InterpApiModule](fullCrossScalaVersions)
    trait InterpApiModule extends AmmModule
        with AmmDependenciesResourceFileModule {
      def moduleDeps: Seq[PublishModule] = Seq(amm.compiler.interface(), amm.util())
      def isCrossFullScalaVersion = true
      def dependencyResourceFileName = "amm-interp-api-dependencies.txt"
      def ivyDeps: T[Agg[Dep]] = super.ivyDeps() ++ Agg(
        Deps.coursierInterface
      )
      override def docJar: T[PathRef] = if (isScala3(crossScalaVersion)) T {
        val outDir = T.ctx().dest
        val javadocDir = outDir / "javadoc"
        os.makeDir.all(javadocDir)
        mill.api.Result.Success(mill.util.Jvm.createJar(Agg(javadocDir))(outDir))
      }
      else super.docJar
      def constantsSourceDir: T[PathRef] = T {
        val dir = T.dest / "src"
        val dest = dir / "Constants.scala"
        val code =
          s"""package ammonite.interp.script
             |
             |/** Build-time constants. Generated by mill. */
             |object Constants {
             |  def semanticDbVersion = "${Deps.semanticDbScalac.dep.versionConstraint.asString}"
             |}
             |""".stripMargin
        os.write(dest, code, createFolders = true)
        PathRef(dir)
      }
      override def generatedSources: T[Seq[PathRef]] =
        super.generatedSources() ++ Seq(constantsSourceDir())
    }
  }
  trait InterpModule extends AmmModule {
    def moduleDeps: Seq[PublishModule] =
      Seq(amm.util(), amm.runtime(), amm.compiler.interface())
    def isCrossFullScalaVersion = true
    def ivyDeps: T[Agg[Dep]] = super.ivyDeps() ++ Agg(
      Deps.bsp4j,
      Deps.fastparse
    ) ++ {
      if (isScala3(crossScalaVersion))
        Agg(
          Deps.sourcecode,
          Deps.scalaCollectionCompat,
          Deps.scalametaSemantidbShared213
            // we remove transitive _2.13 dependencies from Scala 3 and
            // then we add it back with _3
            .exclude("com.lihaoyi" -> "sourcecode_2.13")
            .exclude("org.scala-lang.modules" -> "scala-collection-compat_2.13")
        )
      else
        Agg(
          Deps.scalametaSemantidbShared
        )
    }
  }

//  object `test-runner` extends mill.scalalib.SbtModule {
//    def scalaVersion = "2.12.8"
//    def ivyDeps = super.ivyDeps() ++ Agg(
//      mvn"com.lihaoyi::mill-scalalib:${sys.props("MILL_VERSION")}"
//    )
//  }

  object repl extends Cross[ReplModule](fullCrossScalaVersions) {

    object api extends Cross[ReplApiModule](fullCrossScalaVersions)
    trait ReplApiModule extends AmmModule
        with AmmDependenciesResourceFileModule {
      def isCrossFullScalaVersion = true
      def dependencyResourceFileName = "amm-dependencies.txt"
      def moduleDeps: Seq[PublishModule] = Seq(amm.util(), interp.api())
      def ivyDeps: T[Agg[Dep]] = super.ivyDeps() ++ Agg(
        Deps.mainargs,
        Deps.geny
      )
      def compileIvyDeps: T[Agg[Dep]] = super.compileIvyDeps() ++ (if (isScala3(crossScalaVersion))
                                                                     Agg.empty[Dep]
                                                                   else Agg(Deps.scalaReflect(
                                                                     scalaVersion()
                                                                   )))

      def generatedSources: T[Seq[PathRef]] = T {
        Seq(PathRef(generateConstantsFile(buildVersion, bspVersion = bspVersion)))
      }

      def exposedClassPath: T[Seq[PathRef]] = T {
        amm.repl.api().runClasspath() ++
          amm.repl.api().externalSources() ++
          amm.repl.api().transitiveJars() ++
          amm.repl.api().transitiveSourceJars()
      }
    }

  }
  trait ReplModule extends AmmModule {
    def isCrossFullScalaVersion = true
    def moduleDeps: Seq[PublishModule] = Seq(
      amm.util(),
      amm.runtime(),
      amm.interp(),
      terminal(),
      amm.compiler.interface()
    )
    def ivyDeps: T[Agg[Dep]] = super.ivyDeps() ++ Agg(
      Deps.jlineTerminal,
      Deps.jlineJna,
      Deps.jlineReader,
      Deps.scalaXml(scalaVersion())
    )
    def compileIvyDeps: T[Agg[Dep]] =
      super.compileIvyDeps() ++ (if (isScala3(crossScalaVersion)) Agg.empty[Dep]
                                 else Agg(Deps.scalaReflect(scalaVersion())))

    object test extends AmmTests with AmmDependenciesResourceFileModule {
      def crossScalaVersion: String = ReplModule.this.crossScalaVersion
      def scalaVersion: T[String] = ReplModule.this.scalaVersion
      def dependencyResourceFileName = "amm-test-dependencies.txt"
      def moduleDeps: Seq[JavaModule] = super.moduleDeps ++ Seq(amm.compiler())

      def thinWhitelist: T[PathRef] = T {
        generateApiWhitelist(
          amm.repl.api().exposedClassPath() ++
            amm.compiler().exposedClassPath() ++
            Seq(compile().classes) ++
            resolveDeps(Task.Anon {
              (this.compileIvyDeps() ++ allIvyDeps()).map(bindDependency())
            })()
        )
      }

      def runClasspath: T[Seq[PathRef]] = T {
        super.runClasspath() ++ Agg(thinWhitelist())
      }

      def resources: T[Seq[PathRef]] = Task.Sources {
        (super.resources() ++
          ReplModule.this.sources() ++
          ReplModule.this.externalSources() ++
          resolveDeps(
            Task.Anon { ivyDeps().map(bindDependency()) },
            sources = true,
            artifactTypes = None
          )()).distinct
      }
      def ivyDeps: T[Agg[Dep]] = super.ivyDeps() ++ amm.compiler().ivyDeps() ++ Agg(
        Deps.scalazCore
      )
    }
  }
}

trait MainModule extends AmmModule {
  def isCrossFullScalaVersion = true
  def mainClass: T[Option[String]] = Some("ammonite.AmmoniteMain")
  def artifactName = "ammonite"
  def moduleDeps: Seq[PublishModule] = Seq(
    terminal(),
    amm.util(),
    amm.runtime(),
    amm.interp.api(),
    amm.repl.api(),
    amm.interp(),
    amm.repl(),
    amm.compiler()
  )

  def runClasspath: T[Seq[PathRef]] =
    super.runClasspath() ++
      terminal().sources() ++
      amm.util().sources() ++
      amm.runtime().sources() ++
      amm.interp.api().sources() ++
      amm.repl.api().sources() ++
      amm.interp().sources() ++
      amm.repl().sources() ++
      sources() ++
      externalSources()

  def prependShellScript: T[String] = T {
    mill.util.Jvm.launcherUniversalScript(
      mainClass().get,
      Agg("$0"),
      Agg("%~dpnx0"),
      // G1 Garbage Collector is awesome https://github.com/lihaoyi/Ammonite/issues/216
      Seq("-Xmx500m", "-XX:+UseG1GC")
    )
  }

  def thinWhitelist: T[PathRef] = T {
    generateApiWhitelist(
      amm.repl.api().exposedClassPath() ++
        amm.compiler().exposedClassPath()
    )
  }
  def localClasspath: T[Seq[PathRef]] = T {
    Seq(thinWhitelist()) ++ super.localClasspath()
  }

  def launcher: T[PathRef] = {
    val isWindows = scala.util.Properties.isWin
    if (isWindows)
      T {
        val mainClass = finalMainClass()
        val cp = runClasspath().map(_.path)
        val jvmOpts = forkArgs()
        val dest = T.ctx().dest / "run.bat"

        import coursier.launcher.{BootstrapGenerator, ClassLoaderContent, Parameters, Preamble}
        val classLoaderContent = ClassLoaderContent.fromUrls(cp.map(_.toNIO.toUri.toASCIIString))
        val params = Parameters.Bootstrap(Seq(classLoaderContent), mainClass)
          .withPreamble(
            Preamble()
              .withKind(Preamble.Kind.Bat)
              .withJavaOpts(jvmOpts)
          )
        val thread = Thread.currentThread()
        val cl = thread.getContextClassLoader
        try {
          thread.setContextClassLoader(BootstrapGenerator.getClass.getClassLoader)
          BootstrapGenerator.generate(params, dest.toNIO)
        } finally {
          thread.setContextClassLoader(cl)
        }

        PathRef(dest)
      }
    else
      T {
        super.launcher()
      }
  }

  object test extends AmmTests {
    def moduleDeps: Seq[JavaModule] =
      super.moduleDeps ++ Seq(amm.compiler().test, amm.repl().test)
    def ivyDeps: T[Agg[Dep]] = super.ivyDeps() ++ Agg(
      Deps.scalaJava8Compat
    )

    def thinWhitelist: T[PathRef] = T {
      generateApiWhitelist(
        amm.repl.api().exposedClassPath() ++
          amm.compiler().exposedClassPath() ++
          Seq(amm.repl().test.compile().classes, compile().classes) ++
          resolveDeps(Task.Anon { (compileIvyDeps() ++ allIvyDeps()).map(bindDependency()) })()
      )
    }

    // Need to duplicate this from MainModule due to Mill not properly propagating it through
    def runClasspath: T[Seq[PathRef]] =
      Seq(thinWhitelist()) ++
        super.runClasspath() ++
        terminal().sources() ++
        amm.util().sources() ++
        amm.runtime().sources() ++
        amm.interp.api().sources() ++
        amm.repl.api().sources() ++
        amm.interp().sources() ++
        amm.repl().sources() ++
        sources() ++
        externalSources()

  }
}

def generateApiWhitelist(replApiCp: Seq[PathRef])(implicit ctx: mill.api.Ctx.Dest) = {

  val thinClasspathEntries = replApiCp.map(_.path).flatMap { cpRoot =>
    if (os.isFile(cpRoot) && cpRoot.ext == "jar") {
      val zip = new java.util.zip.ZipFile(cpRoot.toIO)
      import scala.jdk.CollectionConverters._
      for (e <- zip.entries().asScala) yield e.getName
    } else if (os.isDir(cpRoot)) {
      for (sub <- os.walk(cpRoot)) yield sub.relativeTo(cpRoot).toString
    } else if (!os.exists(cpRoot)) Nil
    else throw new Exception(cpRoot.toString)
  }
  os.write(
    ctx.dest / "ammonite-api-whitelist.txt",
    thinClasspathEntries
      .flatMap(_.stripSuffix("/").split('/').inits)
      .filter(_.nonEmpty)
      .map(_.mkString("/"))
      .distinct
      .mkString("\n")
  )
  PathRef(ctx.dest)
}

object integration extends Cross[IntegrationModule](fullCrossScalaVersions)
trait IntegrationModule extends AmmInternalModule {
  def moduleDeps: Seq[JavaModule] = Seq(amm())
  def ivyDeps: T[Agg[Dep]] = T {
    super.ivyDeps() ++ (
      if (scalaVersion().startsWith("2.13."))
        Agg(Deps.cask)
      else
        Agg.empty
    )
  }
  object test extends AmmTests {
    def testLauncher: T[String] = T {
      if (scala.util.Properties.isWin)
        amm().launcher().path.toString
      else
        amm().assembly().path.toString
    }
    def forkEnv: T[Map[String, String]] = super.forkEnv() ++ Seq(
      "AMMONITE_ASSEMBLY" -> testLauncher()
    )
  }
}

object sshd extends Cross[SshdModule](fullCrossScalaVersions)
trait SshdModule extends AmmModule {
  def moduleDeps: Seq[PublishModule] = Seq(amm())
  def isCrossFullScalaVersion = true
  def ivyDeps: T[Agg[Dep]] = super.ivyDeps() ++ Agg(
    // sshd-core 1.3.0 requires java8
    Deps.sshdCore,
    Deps.bcprovJdk15on
  )
  object test extends AmmTests {
    def ivyDeps: T[Agg[Dep]] = super.ivyDeps() ++ Agg(
      // slf4j-nop makes sshd server use logger that writes into the void
      Deps.slf4jNop,
      Deps.jsch,
      Deps.scalacheck
    )
  }
}

/**
 * Selects all cross module instances, that match the given predicate.
 * In Mill 0.11, this can be hopefully replaced with a simple filter on the `crossValue`.
 */
def selectCrossPrefix[T <: mill.Cross.Module[_], V](
    crossModule: Cross[T],
    predicate: String => Boolean
)(accessor: T => V): Seq[V] =
  crossModule.items.collect {
    case item if predicate(item.crossSegments.last) => accessor(item.module.value)
  }
    .tap { mods =>
      if (mods.isEmpty) sys.error(s"No matching cross-instances found in ${crossModule}")
    }

def unitTest(scalaVersion: String = ""): Command[Seq[(String, Seq[mill.testrunner.TestResult])]] = {
  val binPred = (v: String) =>
    v.startsWith(scalaVersion.split("[.\\-]").take(if (v.startsWith("2")) 2 else 1).mkString("."))
  val pred = (_: String).startsWith(scalaVersion)
  val tests = Seq(
    selectCrossPrefix(terminal, binPred)(_.test),
    selectCrossPrefix(amm.repl, pred)(_.test),
    selectCrossPrefix(amm, pred)(_.test),
    selectCrossPrefix(sshd, pred)(_.test)
  ).flatten

  val log = Task.Anon { T.log.streams.out.println(s"Testing modules: ${tests.mkString(", ")}") }

  Task.Command {
    log()
    T.traverse(tests)(_.testCached)()
  }
}

def integrationTest(scalaVersion: String = "") = T.command {
  T.traverse(
    selectCrossPrefix(integration, _.startsWith(scalaVersion))(_.test)
  )(_.testCached)()
}

def generateConstantsFile(
    version: String = buildVersion,
    unstableVersion: String = "<fill-me-in-in-Constants.scala>",
    bspVersion: String = "<fill-me-in-in-Constants.scala>",
    curlUrl: String = "<fill-me-in-in-Constants.scala>",
    unstableCurlUrl: String = "<fill-me-in-in-Constants.scala>",
    oldCurlUrls: Seq[(String, String)] = Nil,
    oldUnstableCurlUrls: Seq[(String, String)] = Nil,
    returnDirectory: Boolean = true
)(implicit ctx: mill.api.Ctx.Dest) = {
  val versionTxt = s"""
    package ammonite
    object Constants{
      val version = "$version"
      val unstableVersion = "$unstableVersion"
      val bspVersion = "$bspVersion"
      val curlUrl = "$curlUrl"
      val unstableCurlUrl = "$unstableCurlUrl"
      val oldCurlUrls = Seq[(String, String)](
        ${oldCurlUrls.map { case (name, value) => s""" "$name" -> "$value" """ }.mkString(",\n")}
      )
      val oldUnstableCurlUrls = Seq[(String, String)](
        ${oldUnstableCurlUrls.map { case (name, value) => s""" "$name" -> "$value" """ }.mkString(
      ",\n"
    )}
      )
    }
  """
  println("Writing Constants.scala")

  val dir = ctx.dest / "src"
  os.write(dir / "Constants.scala", versionTxt, createFolders = true)
  if (returnDirectory) dir
  else dir / "Constants.scala"
}

def generateDependenciesFile(fileName: String, deps: Seq[coursier.Dependency])(implicit
    ctx: mill.api.Ctx.Dest
) = {

  val dir = ctx.dest / "extra-resources"
  val dest = dir / fileName

  val content = deps
    .map { dep =>
      (dep.module.organization.value, dep.module.name.value, dep.versionConstraint.asString)
    }
    .sorted
    .map {
      case (org, name, ver) =>
        s"$org:$name:$ver"
    }
    .mkString("\n")

  os.makeDir(dir)
  println(s"Writing $dest")
  dir.toIO.mkdirs()
  os.write(dest, content.getBytes("UTF-8"))

  dir
}

def publishExecutable() = Task.Command {
  val latestAssemblyJars = T.sequence(latestAssemblies)()

  println("MASTER COMMIT: Creating a release")
  if (!unstable) {
    requests.post(
      s"https://api.github.com/repos/$ghOrg/$ghRepo/releases",
      data = ujson.write(
        ujson.Obj(
          "tag_name" -> buildVersion,
          "name" -> buildVersion,
          "body" -> s"${homePage}/#${buildVersion}"
        )
      ),
      headers = Seq("Authorization" -> s"token ${sys.env("AMMONITE_BOT_AUTH_TOKEN")}")
    )
  }

  for ((version, jar) <- assemblyCrossScalaVersions.zip(latestAssemblyJars)) {
    println("MASTER COMMIT: Publishing Executable for Scala " + version)
    // Prepare executable

    val scalaBinaryVersion = version.take(version.lastIndexOf("."))
    upload(
      uploadedFile = jar.path,
      tagName = latestTaggedVersion,
      uploadName = s"$scalaBinaryVersion-$buildVersion",
      authKey = sys.env("AMMONITE_BOT_AUTH_TOKEN"),
      ghOrg = ghOrg,
      ghRepo = ghRepo
    )
    upload(
      uploadedFile = os.temp(
        os.read(Task.workspace / "amm-template.sh")
          .replace("DEFAULT_AMM_VERSION=", s"DEFAULT_AMM_VERSION=$latestTaggedVersion")
          .replace("DEFAULT_SCALA_VERSION=", s"DEFAULT_SCALA_VERSION=$scalaBinaryVersion")
      ),
      tagName = latestTaggedVersion,
      uploadName = s"$scalaBinaryVersion-$buildVersion-bootstrap",
      authKey = sys.env("AMMONITE_BOT_AUTH_TOKEN"),
      ghOrg = ghOrg,
      ghRepo = ghRepo
    )
  }
}

def publishDocs(skipDeploy: Boolean = false): Command[Unit] = {
  val ammoniteAssembly = amm(scala2_13Versions.last).assembly
  // Disable doc auto-publishing for now, as the recent modularization means we
  // need to make significant changes to the readme and that'll time.
  Task.Command {
    println("MASTER COMMIT: Updating version and publishing to Github Pages")

    if (!skipDeploy) {
      val deployKey = sys.env("DEPLOY_KEY").replace("\\n", "\n")
      os.write(Task.workspace / "deploy_key", deployKey)
    }

    val (stableKey, unstableKey, oldStableKeys, oldUnstableKeys) =
      if (!unstable) {
        (
          s"$latestTaggedVersion/2.13-$latestTaggedVersion",
          s"$latestTaggedVersion/2.13-$latestTaggedVersion",
          for (v <- Seq("2.12"))
            yield s"$latestTaggedVersion/$v-$latestTaggedVersion",
          for (v <- Seq("2.12"))
            yield s"$latestTaggedVersion/$v-$latestTaggedVersion"
        )
      } else {
        (
          s"$latestTaggedVersion/2.13-$latestTaggedVersion",
          s"$latestTaggedVersion/2.13-$buildVersion",
          for (v <- Seq("2.12"))
            yield s"$latestTaggedVersion/$v-$latestTaggedVersion",
          for (v <- Seq("2.12"))
            yield s"$latestTaggedVersion/$v-$buildVersion"
        )
      }
    println("(stableKey, unstableKey)")
    println((stableKey, unstableKey))
    val constantsFile = generateConstantsFile(
      latestTaggedVersion,
      buildVersion,
      bspVersion,
      s"https://github.com/$ghOrg/$ghRepo/releases/download/$stableKey",
      s"https://github.com/$ghOrg/$ghRepo/releases/download/$unstableKey",
      for (k <- oldStableKeys)
        yield (k, s"https://github.com/$ghOrg/$ghRepo/releases/download/$k"),
      for (k <- oldUnstableKeys)
        yield (k, s"https://github.com/$ghOrg/$ghRepo/releases/download/$k"),
      returnDirectory = false
    )

    os.proc(
      "sbt",
      "readme/run"
    ).call(
      cwd = T.workspace,
      env = Map(
        "AMMONITE_ASSEMBLY" -> ammoniteAssembly().path.toString,
        "CONSTANTS_FILE" -> constantsFile.toString
      )
    )
    if (skipDeploy) {
      println("Skip deployment")
    } else {
      println("Deploying ...")
      os.proc("ci/deploy_master_docs.sh").call(cwd = Task.workspace)
    }
    ()
  }
}

def partition(
    publishArtifacts: mill.main.Tasks[PublishModule.PublishData],
    shard: Int,
    divisionCount: Int
) = {

  val groupedArtifacts = publishArtifacts.value
    .map { t =>
      val taskCrossVersion = t.ctx.segments.value
        .collectFirst { case mill.define.Segment.Cross(List(v)) => v }
        .get

      // Sort primarily on the scalaVersion, using the rendered name of the
      // task as the secondary sort key to break ties and ensure determinism
      t -> (fullCrossScalaVersions.indexOf(taskCrossVersion), t.ctx.segments.render)
    }
    .toMap

  val sortedArtifacts = publishArtifacts.value.sortBy(groupedArtifacts)

  val boundaries =
    for (x <- 0 to divisionCount)
      yield math.round((x.toDouble * sortedArtifacts.length) / divisionCount).toInt

  sortedArtifacts.slice(boundaries(shard - 1), boundaries(shard))

}

/**
 * Somethime, the Mill publish command fails although the Sonatype publishing went through.
 * This command checks, whether all artifacts are publshed.
 * Run with:
 * {{{
 * mill checkPublishedArtifacts --artifacts __.publishSelfDependency --version {version} --ttl "1 sec"
 * }}}
 * See also https://github.com/com-lihaoyi/Ammonite/pull/1453
 */
def checkPublishedArtifacts(artifacts: Tasks[Artifact], version: String, ttl: String = "1 hour") =
  Task.Command {
    val coords = T.sequence(artifacts.value)()
    val next = new AtomicInteger(0)
    val fut = coords.map { coord =>
      Future {
        val dep = s"${coord.group}:${coord.id}:$version"
        println(s"[${next.incrementAndGet()}/${coords.size}] Checking $dep")
        val res = os.proc("cs", "complete-dep", dep, "-l", ttl)
          .call().out.text().trim()
        // println(res)
        Option.when(!res.contains(version))(dep)
      }(ExecutionContext.global)
    }
    val missing = fut.flatMap(Await.result(_, duration.Duration.Inf))
    if (missing.isEmpty) {
      Result.Success(s"All artifacts published for version $version")
    } else {
      val msg =
        if (missing.size == coords.size) s"All artifacts missing for version $version"
        else s"Missing ${missing.size} of ${coords.size} published artifacts: ${
            missing.mkString("\n- ", "\n- ", "")
          }"
      Result.Failure(msg)
    }
  }
